#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ñ—É—Ä–Ω–∞–ª–∞ –≠–ª–∞—Ä—ã
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç black-forest-labs/FLUX.1-schnell —á–µ—Ä–µ–∑ Hugging Face Inference API
"""

import requests
import os
import sys
import argparse
from PIL import Image
from io import BytesIO

# üîπ –≠–Ω–¥–ø–æ–∏–Ω—Ç FLUX.1-schnell (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ HF_TOKEN)
API_URL = "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-schnell"

def get_hf_token():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    token = os.getenv('HF_TOKEN')
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: HF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ GitHub Secrets.")
        sys.exit(1)
    return {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

def read_prompt_from_file(filepath):
    """–ß–∏—Ç–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞: {e}")
        sys.exit(1)

def generate_image(prompt, headers, num_inference_steps=4, guidance_scale=0.0):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Hugging Face Inference API.
    FLUX.1-schnell —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç guidance_scale.
    """
    payload = {
        "inputs": prompt,
        "parameters": {
            "num_inference_steps": num_inference_steps,
            "guidance_scale": guidance_scale
        }
    }

    print("üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ FLUX.1-schnell...")
    try:
        response = requests.post(API_URL, headers=headers, json=payload, timeout=60)
        
        # –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî Hugging Face –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 503 —Å estimated_time
        if response.status_code == 503:
            error_data = response.json()
            wait_time = error_data.get("estimated_time", 20)
            print(f"‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {wait_time} —Å–µ–∫—É–Ω–¥.")
            print("‚ÑπÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ CI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –µ—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫.")
            return None

        response.raise_for_status()
        content_type = response.headers.get('content-type', '')

        if 'image' in content_type:
            return response.content
        else:
            # –ò–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è JSON —Å –æ—à–∏–±–∫–æ–π
            try:
                error_json = response.json()
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {error_json}")
            except:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text[:200]}...")
            return None

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def save_image(image_bytes, output_path="data/generated_image.png"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å."""
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    if image_bytes:
        try:
            image = Image.open(BytesIO(image_bytes))
            image.save(output_path)
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    return False

def main():
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≠–ª–∞—Ä—ã —á–µ—Ä–µ–∑ FLUX.1-schnell")
    parser.add_argument("--prompt", type=str, help="–ü—Ä—è–º–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    parser.add_argument("--prompt-file", type=str, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, data/latest_image_prompt.txt)")
    parser.add_argument("--output", type=str, default="data/generated_image.png", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
    if args.prompt_file:
        prompt = read_prompt_from_file(args.prompt_file)
        print(f"üìÑ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑: {args.prompt_file}")
    elif args.prompt:
        prompt = args.prompt
        print("‚úèÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
    else:
        prompt = os.getenv('PROMPT')
        if not prompt:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–º–ø—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --prompt, --prompt-file –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PROMPT.")
            sys.exit(1)
        print("üåç –ü—Ä–æ–º–ø—Ç –≤–∑—è—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PROMPT.")

    print(f"\nüîç –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n")

    headers = get_hf_token()
    image_bytes = generate_image(prompt, headers)

    if image_bytes and save_image(image_bytes, args.output):
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        sys.exit(1)

if __name__ == "__main__":
    main()
