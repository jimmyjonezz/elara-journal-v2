#src/generate_image.py
"""
–°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ñ—É—Ä–Ω–∞–ª–∞ –≠–ª–∞—Ä—ã.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ data/latest_image_prompt.txt –∏ –¥–∞—Ç—É –∏–∑ data/journal.json.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ data/images/{date}.webp
"""

import replicate
import requests
import os
import datetime
import json
import sys

# üîë –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API –∫–ª—é—á Replicate
REPLICATE_API_TOKEN = os.environ.get("REPLICATE_API_TOKEN")
if not REPLICATE_API_TOKEN or not REPLICATE_API_TOKEN.startswith("r8_"):
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á Replicate (–æ–∂–∏–¥–∞–µ—Ç—Å—è r8_...)")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è REPLICATE_API_TOKEN.")
    sys.exit(1)

# üìÅ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_DIR = os.path.join(PROJECT_ROOT, "data")
IMAGES_DIR = os.path.join(DATA_DIR, "images")
IMAGE_PROMPT_FILE = os.path.join(DATA_DIR, "latest_image_prompt.txt")
JOURNAL_FILE = os.path.join(DATA_DIR, "journal.json")

# üìÅ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(IMAGES_DIR, exist_ok=True)

# üìÑ –ß–∏—Ç–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑ journal.json
try:
    with open(JOURNAL_FILE, "r", encoding="utf-8") as f:
        journal_data = json.load(f)
    if not journal_data or not isinstance(journal_data, list):
        raise ValueError("–§–∞–π–ª journal.json –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π.")
    last_entry = journal_data[-1]  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    entry_date_str = last_entry.get("date")
    if not entry_date_str:
        raise ValueError("–ü–æ–ª–µ 'date' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ journal.json.")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD)
    entry_date = datetime.datetime.strptime(entry_date_str, "%Y-%m-%d").date()
    print(f"‚úÖ –î–∞—Ç–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏: {entry_date_str}")
except FileNotFoundError:
    print(f"‚ùå –§–∞–π–ª {JOURNAL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)
except (ValueError, KeyError, IndexError) as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—ã –∏–∑ {JOURNAL_FILE}: {e}")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {JOURNAL_FILE}: {e}")
    sys.exit(1)

# üìÑ –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ latest_image_prompt.txt
try:
    with open(IMAGE_PROMPT_FILE, "r", encoding="utf-8") as f:
        prompt_text = f.read().strip()
    if not prompt_text:
        raise ValueError("–§–∞–π–ª latest_image_prompt.txt –ø—É—Å—Ç.")
    print("‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ latest_image_prompt.txt")
except FileNotFoundError:
    print(f"‚ùå –§–∞–π–ª {IMAGE_PROMPT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ generate_entry.js —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –∏ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª.")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {IMAGE_PROMPT_FILE}: {e}")
    sys.exit(1)

# üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
try:
    print("üñºÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Replicate (black-forest-labs/flux-dev)...")

    output = replicate.run(
        "black-forest-labs/flux-dev",
        input={
            "prompt": prompt_text,
            "go_fast": True,
            "guidance": 4.5,
            "megapixels": "1",
            "num_outputs": 1,
            "aspect_ratio": "1:1",
            "output_format": "webp",
            "output_quality": 80,
            "prompt_strength": 0.8,
            "num_inference_steps": 28,
            "seed": 2909 # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: seed –≤–æ–∑–≤—Ä–∞—â—ë–Ω –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –æ–±–ª–∏–∫–∞
        }
    )

    if not output or len(output) == 0:
        raise ValueError("Replicate –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

    image_url = output[0]
    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –°—Å—ã–ª–∫–∞: {image_url}")

    # üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    response = requests.get(image_url, headers={'User-Agent': 'Mozilla/5.0 (compatible; ImageGenerator/1.0)'})

    if response.status_code != 200:
        raise requests.HTTPError(f"HTTP {response.status_code}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    # üÜï –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏
    filename = f"{entry_date_str}.webp"
    filepath = os.path.join(IMAGES_DIR, filename)

    # üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
    if os.path.exists(filepath):
        print(f"‚ö†Ô∏è –§–∞–π–ª {filepath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º...")

    with open(filepath, "wb") as f:
        f.write(response.content)

    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ '{filepath}'")
    print(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(filepath)}")

except replicate.ReplicateError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ Replicate API: {e}")
    sys.exit(1)
except requests.RequestException as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    sys.exit(1)
