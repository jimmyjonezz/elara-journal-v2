// src/utils/retryHandler.js

const { MAX_RETRIES, BASE_DELAY_MS } = require('../config');

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö/–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
 */
async function withRetry(fn, maxRetries = MAX_RETRIES, baseDelay = BASE_DELAY_MS, actionName) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${actionName}...`);
      const result = await fn();
      console.log(`‚úÖ ${actionName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}.`);
      return result;
    } catch (error) {
      lastError = error;
      const msg = error.message || String(error);

      // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
      const isRetryable =
        msg.includes('502') ||
        msg.includes('503') ||
        msg.includes('504') ||
        msg.includes('Bad Gateway') ||
        msg.includes('Service Unavailable') ||
        msg.includes('timeout') ||
        msg.includes('ECONNRESET') ||
        msg.includes('ENOTFOUND');

      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è ${actionName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, msg);

      if (isRetryable && attempt < maxRetries) {
        const delay = Math.pow(2, attempt - 1) * baseDelay;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        break; // –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
      }
    }
  }
  console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ ${actionName} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.`);
  throw lastError;
}

module.exports = { withRetry };
