const { generateEssay, generateReflection } = require('./utils/openrouter');
const { readJSON, writeJSON } = require('./utils/fileUtils');
const {
  DATA_DIR,
  JOURNAL_PATH,
  ANALYSIS_PATH,
  DYNAMIC_TAGS_PATH,
  TAG_STATS_PATH,
  PROMPT_TEMPLATE_PATH,
  MAX_RETRIES,
  BASE_DELAY_MS
} = require('./config');

// üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É —Å–ª–æ–≤–∞—Ä—é
const SEMANTIC_DICT_PATH = require('path').join(__dirname, 'config', 'semantic-dictionary.json');

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
 */
async function loadSemanticDictionary() {
  try {
    const dict = await readJSON(SEMANTIC_DICT_PATH);
    return dict;
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å:', error.message);
    return {};
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
 */
async function extractTags(text) {
  const dictionary = await loadSemanticDictionary();
  const lowerText = text.toLowerCase();
  const tags = new Set();

  for (const [tag, data] of Object.entries(dictionary)) {
    if (!data.—Ñ–æ—Ä–º—ã || !Array.isArray(data.—Ñ–æ—Ä–º—ã)) continue;
    for (const form of data.—Ñ–æ—Ä–º—ã) {
      const normalizedForm = form.trim().toLowerCase();
      if (normalizedForm && lowerText.includes(normalizedForm)) {
        tags.add(tag);
        break; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      }
    }
  }

  // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–µ–≥–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  if (tags.size === 0) {
    ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"].forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ "–£—Ä–æ–≤–µ–Ω—å: ..."
 */
function determineReflectionLevel(reflectionText) {
  let level = "—Å—Ä–µ–¥–Ω–∏–π";
  const levelMatch = reflectionText.match(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*(.*)$/i);
  if (levelMatch && levelMatch[1]) {
    const extractedLevel = levelMatch[1].trim().toLowerCase().replace(/[^\w–∞-—è—ë]/gi, '');
    if (["–≥–ª—É–±–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–≥–ª—É–±–æ–∫–∞—è", "–≤—ã—Å–æ–∫–∞—è"].includes(extractedLevel)) {
      level = "–≤—ã—Å–æ–∫–∏–π";
    } else if (["—Å—Ä–µ–¥–Ω–∏–π", "—Å—Ä–µ–¥–Ω—è—è"].includes(extractedLevel)) {
      level = "—Å—Ä–µ–¥–Ω–∏–π";
    } else if (["–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π", "–Ω–∏–∑–∫–∏–π", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è", "–Ω–∏–∑–∫–∞—è"].includes(extractedLevel)) {
      level = "–Ω–∏–∑–∫–∏–π";
    }
  }
  return level;
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É "–£—Ä–æ–≤–µ–Ω—å: ..." –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
 */
function cleanReflectionText(reflectionText) {
  return reflectionText.replace(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*.*$/i, '').trim();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
async function withRetry(fn, maxRetries, baseDelay, actionName) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${actionName}...`);
      const result = await fn();
      console.log(`‚úÖ ${actionName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}.`);
      return result;
    } catch (error) {
      lastError = error;
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è ${actionName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt - 1) * baseDelay;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ ${actionName} –Ω–µ —É–¥–∞–ª–∏—Å—å.`);
  throw lastError;
}

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
 */
async function prepareEntryData() {
  console.log("üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...");

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞ ---
  let previousSuggestions = "–°–æ–≤–µ—Ç—ã –æ—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.";
  try {
    const analysisData = await readJSON(ANALYSIS_PATH);
    if (Array.isArray(analysisData.suggestions) && analysisData.suggestions.length > 0) {
      const lastSuggestions = analysisData.suggestions.slice(-3);
      previousSuggestions = lastSuggestions.join('\n');
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${lastSuggestions.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞.`);
    } else {
      console.log("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ 'suggestions' –∏–ª–∏ –æ–Ω –ø—É—Å—Ç.");
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", error.message);
  }

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞ ---
  let criticTags = [];
  try {
    const dynamicTagsData = await readJSON(DYNAMIC_TAGS_PATH);
    if (dynamicTagsData && Array.isArray(dynamicTagsData.tags)) {
      criticTags = [...new Set(dynamicTagsData.tags.map(tag => tag.toLowerCase().trim()))];
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${criticTags.length} —Ç–µ–≥–æ–≤ –æ—Ç –∫—Ä–∏—Ç–∏–∫–∞:`, criticTags);
    } else {
      console.log("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ —Ç–µ–≥–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞ –Ω–µ—Ç –ø–æ–ª—è 'tags' –∏–ª–∏ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.");
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Ç–µ–≥–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞:", error.message);
  }

  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Å—Å–µ ---
  console.log("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ...");
  const staticInspirationTags = await extractTags(previousSuggestions);
  const essayData = {
    previous_suggestions: previousSuggestions,
    combined_inspiration_tags: [...new Set([...staticInspirationTags, ...criticTags])].join(', ')
  };

  const rawEssay = await withRetry(() => generateEssay(essayData), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Å—Å–µ");
  if (!rawEssay || rawEssay.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —ç—Å—Å–µ (–¥–ª–∏–Ω–∞: ${rawEssay?.length || 0}).`);
  }
  console.log("üìÑ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–≥–æ —ç—Å—Å–µ:", rawEssay.length);

  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
  const rawReflection = await withRetry(() => generateReflection(rawEssay), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
  if (!rawReflection || rawReflection.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–¥–ª–∏–Ω–∞: ${rawReflection?.length || 0}).`);
  }
  console.log("üí≠ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:", rawReflection.length);

  const cleanReflection = cleanReflectionText(rawReflection);
  const fullEntryClean = `${rawEssay}\n\n${cleanReflection}`;

  // --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ ---
  const staticTags = await extractTags(fullEntryClean);
  console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: ${staticTags.length}`, staticTags);

  // --- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ ---
  const allTags = Array.from(new Set([...staticTags, ...criticTags]));
  console.log(`üè∑Ô∏è –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${allTags.length}`, allTags);

  // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  const level = determineReflectionLevel(rawReflection);

  return {
    rawEssay,
    rawReflection: cleanReflection,
    cleanEntry: fullEntryClean,
    staticTags,
    criticTags,
    tags: allTags,
    level
  };
}

// --- –†–∞–±–æ—Ç–∞ —Å –∂—É—Ä–Ω–∞–ª–æ–º ---
async function loadJournal() {
  const journal = await readJSON(JOURNAL_PATH);
  return Array.isArray(journal) ? journal : [];
}

async function saveJournal(journal) {
  await writeJSON(JOURNAL_PATH, journal);
}

async function loadTagStatistics() {
  const stats = await readJSON(TAG_STATS_PATH);
  return stats || {};
}

async function updateAndSaveTagStatistics(currentStats, staticTags, criticTags, entryDate) {
  const updatedStats = { ...currentStats };
  const normalizedStaticTags = staticTags.map(tag => tag.toLowerCase());
  const normalizedCriticTags = criticTags.map(tag => tag.toLowerCase());
  const allTagsFromEntry = new Set([...normalizedStaticTags, ...normalizedCriticTags]);

  for (const tag of allTagsFromEntry) {
    if (updatedStats[tag]) {
      updatedStats[tag].count += 1;
      updatedStats[tag].lastSeen = entryDate;
      if (normalizedStaticTags.includes(tag) && !updatedStats[tag].types.includes('static')) {
        updatedStats[tag].types.push('static');
      }
      if (normalizedCriticTags.includes(tag) && !updatedStats[tag].types.includes('critic')) {
        updatedStats[tag].types.push('critic');
      }
    } else {
      updatedStats[tag] = {
        count: 1,
        firstSeen: entryDate,
        lastSeen: entryDate,
        types: []
      };
      if (normalizedStaticTags.includes(tag)) updatedStats[tag].types.push('static');
      if (normalizedCriticTags.includes(tag)) updatedStats[tag].types.push('critic');
    }
  }

  await writeJSON(TAG_STATS_PATH, updatedStats);
  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function createNewEntry() {
  try {
    const {
      rawEssay,
      rawReflection,
      cleanEntry,
      staticTags,
      criticTags,
      tags,
      level
    } = await prepareEntryData();

    const entry = {
      date: new Date().toISOString().split('T')[0],
      entry: cleanEntry,
      tags,
      reflection_level: level,
      raw_essay: rawEssay,
      raw_reflection: rawReflection
    };

    const journal = await loadJournal();
    journal.push(entry);
    await saveJournal(journal);
    console.log(`‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${journal.length}`);

    const tagStats = await loadTagStatistics();
    await updateAndSaveTagStatistics(tagStats, staticTags, criticTags, entry.date);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

module.exports = { createNewEntry };

// --- –ó–∞–ø—É—Å–∫ ---
if (require.main === module) {
  (async () => {
    try {
      await createNewEntry();
      console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.');
    } catch (err) {
      console.error('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π:', err);
      process.exit(1);
    }
  })();
}
