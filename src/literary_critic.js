// src/literary_critic.js
const { generateCritique } = require('./utils/openrouter');
const { readJSON, writeJSON } = require('./utils/fileUtils');
const {
  JOURNAL_PATH,
  ANALYSIS_PATH,
  MAX_RETRIES = 3,
  BASE_DELAY_MS = 2000
} = require('./config');

const path = require('path');
const fs = require('fs').promises;

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö/–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
 */
async function withRetry(fn, maxRetries, baseDelay, actionName) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${actionName}...`);
      const result = await fn();
      console.log(`‚úÖ ${actionName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}.`);
      return result;
    } catch (error) {
      lastError = error;
      const msg = error.message || String(error);

      // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
      const isRetryable = 
        msg.includes('502') || 
        msg.includes('503') || 
        msg.includes('504') || 
        msg.includes('Bad Gateway') || 
        msg.includes('Service Unavailable') || 
        msg.includes('timeout') ||
        msg.includes('ECONNRESET') ||
        msg.includes('ENOTFOUND');

      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è ${actionName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, msg);

      if (isRetryable && attempt < maxRetries) {
        const delay = Math.pow(2, attempt - 1) * baseDelay;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        break; // –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö (–Ω–∞–ø—Ä., –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
      }
    }
  }
  console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ ${actionName} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.`);
  throw lastError;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
 */
async function runLiteraryCritique() {
  console.log('üîç –ó–∞–ø—É—Å–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å (–∞–Ω–∞–ª–∏–∑ –ø–æ RPP v2.0 ‚Äî –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏)
  const journal = await readJSON(JOURNAL_PATH);
  if (!Array.isArray(journal) || journal.length === 0) {
    throw new Error('–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç ‚Äî –Ω–µ—á–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.');
  }

  const lastEntry = journal[journal.length - 1];

  // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∫–∞–∫ –≤ —ç—Å—Å–µ: "7 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞"
  const today = new Date().toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  });

  const critiqueData = {
    entry_date: today,
    entry_tags: lastEntry.tags || [],
    entry_reflection_level: lastEntry.reflection_level || '—Å—Ä–µ–¥–Ω–∏–π',
    entry_essay: lastEntry.raw_essay || '',
    entry_reflection: lastEntry.raw_reflection || '',
    history_context: lastEntry.context || '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.'
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
  const rawResponse = await withRetry(
    () => generateCritique(critiqueData),
    MAX_RETRIES,
    BASE_DELAY_MS,
    '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
  );

  // –ü–∞—Ä—Å–∏–Ω–≥ JSON
  let analysis;
  if (typeof rawResponse === 'string') {
    try {
      // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –∏—Ö –¥–æ–±–∞–≤–∏–ª–∞
      const cleanJson = rawResponse
        .replace(/^```json\s*/i, '')
        .replace(/\s*```$/i, '')
        .trim();
      analysis = JSON.parse(cleanJson);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –∫—Ä–∏—Ç–∏–∫–∞:', e.message);
      console.error('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', rawResponse);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏');
    }
  } else {
    analysis = rawResponse; // —É–∂–µ –æ–±—ä–µ–∫—Ç
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
  const result = {
    generated_at: new Date().toISOString(),
    ...analysis
  };
  await writeJSON(ANALYSIS_PATH, result);
  console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ${ANALYSIS_PATH}`);
}

module.exports = { runLiteraryCritique };

// --- –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é ---
if (require.main === module) {
  (async () => {
    try {
      await runLiteraryCritique();
    } catch (err) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ literary_critic.js:', err.message);
      process.exit(1);
    }
  })();
}
