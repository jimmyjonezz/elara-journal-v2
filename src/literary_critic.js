const { readJSON, writeJSON } = require('./utils/fileUtils');
const { callOpenRouter } = require('./utils/openrouter');
const { JOURNAL_PATH, ANALYSIS_PATH, DYNAMIC_TAGS_PATH, PROMPT_TEMPLATE_PATH } = require('./config');
const fs = require('fs/promises');
const path = require('path');

async function loadJournal() {
  try {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞ –∏–∑:', JOURNAL_PATH);
    const data = await readJSON(JOURNAL_PATH);

    let entriesArray;
    if (Array.isArray(data)) {
      entriesArray = data;
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', entriesArray.length);
    } else if (data && typeof data === 'object' && Array.isArray(data.entries)) {
      entriesArray = data.entries;
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç —Å –∑–∞–ø–∏—Å—è–º–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ entries:', entriesArray.length);
    } else {
      console.log('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º "entries".');
      return [];
    }

    return entriesArray;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞:', error);
    throw error;
  }
}

function createHistoryContext(entries, currentDate, count = 3) {
  const currentIndex = entries.findIndex(entry => entry.date === currentDate);
  if (currentIndex === -1) {
    console.log(`–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å —Å DATE ${currentDate} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${count} –∑–∞–ø–∏—Å–µ–π.`);
    const startIndex = Math.max(0, entries.length - count);
    return entries.slice(startIndex).map(formatEntryForContext).join('\n---\n');
  }

  const previousEntries = entries.slice(Math.max(0, currentIndex - count), currentIndex);
  console.log(`–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ ${previousEntries.length} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.`);
  return previousEntries.map(formatEntryForContext).join('\n---\n');
}

function formatEntryForContext(entry) {
  return `–î–∞—Ç–∞: ${entry.date}\n` +
    `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${entry.title || entry.topic || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}\n` +
    `–¢–µ–≥–∏: ${(entry.tags || []).join(', ')}\n` +
    `–§—Ä–∞–≥–º–µ–Ω—Ç —ç—Å—Å–µ: ${(entry.essay || entry.entry || '').substring(0, 150)}...\n` +
    `–§—Ä–∞–≥–º–µ–Ω—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: ${(entry.reflection || '').substring(0, 150)}...`;
}

async function loadPromptTemplate() {
  try {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑:', PROMPT_TEMPLATE_PATH);
    return await fs.readFile(PROMPT_TEMPLATE_PATH, 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞:', error);
    throw error;
  }
}

function fillPromptTemplate(template, data) {
  console.log('–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞...');
  return template
    .replace('{{entry_title}}', data.title || data.topic || '')
    .replace('{{entry_tags}}', (data.tags || []).join(', '))
    .replace('{{entry_reflection_level}}', data.reflection_level || data.level || '')
    .replace('{{entry_essay}}', data.essay || data.entry || '')
    .replace('{{entry_reflection}}', data.reflection || '')
    .replace('{{history_context}}', data.history_context || '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

async function createAnalysisPrompt(entry, historyContext) {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–∏:', entry.date);
  const template = await loadPromptTemplate();

  const promptData = {
    title: entry.title,
    topic: entry.topic,
    tags: entry.tags,
    reflection_level: entry.reflection_level,
    level: entry.level,
    essay: entry.essay,
    entry: entry.entry,
    reflection: entry.reflection,
    history_context: historyContext
  };

  return fillPromptTemplate(template, promptData);
}

async function saveDynamicTags(tags) {
  try {
    const tagData = {
      last_updated: new Date().toISOString().split('T')[0],
      tags: tags || []
    };
    await writeJSON(DYNAMIC_TAGS_PATH, tagData);
    console.log(`‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${DYNAMIC_TAGS_PATH}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤:`, error);
  }
}

async function analyzeLatestEntry() {
  try {
    console.log('üñãÔ∏è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫—Ä–∏—Ç–∏–∫ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –∞–Ω–∞–ª–∏–∑—É –∂—É—Ä–Ω–∞–ª–∞ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å)...');
    const journal = await loadJournal();

    if (!journal || journal.length === 0) {
      console.log('–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç, –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      const emptyAnalysis = {
        generated_at: new Date().toISOString().split('T')[0],
        error: "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç, –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
      };
      await writeJSON(ANALYSIS_PATH, emptyAnalysis);
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª literary_analysis.json —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.');
      return;
    }

    const latestEntry = journal[journal.length - 1];
    console.log(`–ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ –æ—Ç ${latestEntry.date}...`);

    const historyContext = createHistoryContext(journal, latestEntry.date);

    const prompt = await createAnalysisPrompt(latestEntry, historyContext);

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM...');
    const response = await callOpenRouter(prompt);

    let analysisResult;
    try {
      analysisResult = JSON.parse(response);
      console.log("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –Ω–∞–ø—Ä—è–º—É—é.");
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ:', parseError.message);
      throw parseError;
    }

    let dynamicTagsForSaving = [];
    if (analysisResult && Array.isArray(analysisResult.tags_for_search)) {
      dynamicTagsForSaving = analysisResult.tags_for_search;
      console.log(`üîç [DEBUG] –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${dynamicTagsForSaving.length}`, dynamicTagsForSaving);
    } else {
      console.warn("‚ö†Ô∏è –ü–æ–ª–µ 'tags_for_search' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ –æ—Ç–≤–µ—Ç–µ –∫—Ä–∏—Ç–∏–∫–∞.");
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    await saveDynamicTags(dynamicTagsForSaving);

    // –ò—Å–∫–ª—é—á–∞–µ–º tags_for_search –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const { tags_for_search, ...rest } = analysisResult;
    const finalResult = {
      generated_at: new Date().toISOString().split('T')[0],
      ...rest
    };

    await writeJSON(ANALYSIS_PATH, finalResult);
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª literary_analysis.json —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞:', error);

    const criticalErrorResult = {
      generated_at: new Date().toISOString().split('T')[0],
      error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
      stack: error.stack
    };

    try {
      await writeJSON(ANALYSIS_PATH, criticalErrorResult);
      console.log(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ ${ANALYSIS_PATH}. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.`);
    } catch (writeError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞:', writeError);
    }
  }
}

if (require.main === module) {
  analyzeLatestEntry();
}

module.exports = { analyzeLatestEntry };
