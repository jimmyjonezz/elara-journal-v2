// src/literary_critic.js
const fs = require('fs').promises;
const path = require('path');
const { callOpenRouter } = require('./utils/openrouter');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const JOURNAL_PATH = path.join(__dirname, '../data/journal.json');
const ANALYSIS_PATH = path.join(__dirname, '../data/literary_analysis.json');
const PROMPT_TEMPLATE_PATH = path.join(__dirname, '../prompt_templates/analyst_prompt.txt');

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –∑–∞–ø–∏—Å–µ–π
 */
async function loadJournal() {
  try {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞ –∏–∑:', JOURNAL_PATH);
    const data = await fs.readFile(JOURNAL_PATH, 'utf8');
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä:', data.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    if (!data.trim()) {
      console.log('–§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –ø—É—Å—Ç.');
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç
    }
    
    const parsedData = JSON.parse(data);
    console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω—ã. –¢–∏–ø:', typeof parsedData);
    
    let entriesArray;
    if (Array.isArray(parsedData)) {
      entriesArray = parsedData;
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', entriesArray.length);
    } else if (parsedData && typeof parsedData === 'object' && Array.isArray(parsedData.entries)) {
      entriesArray = parsedData.entries;
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç —Å –∑–∞–ø–∏—Å—è–º–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ entries:', entriesArray.length);
    } else {
      console.log('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º "entries".');
      console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):', JSON.stringify(parsedData, null, 2).substring(0, 300));
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    }
    
    return entriesArray;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞:', error.message);
    // –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
    if (error instanceof SyntaxError) {
       try {
         const rawData = await fs.readFile(JOURNAL_PATH, 'utf8');
         console.error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', rawData.substring(0, 500));
       } catch (readError) {
         console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', readError.message);
       }
    }
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
 * @param {Array} entries - –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
 * @param {string} currentId - ID —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
 */
function createHistoryContext(entries, currentId, count = 3) {
  const currentIndex = entries.findIndex(entry => entry.id === currentId);
  if (currentIndex === -1) {
    console.log(`–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å —Å ID ${currentId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${count} –∑–∞–ø–∏—Å–µ–π.`);
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ count –∑–∞–ø–∏—Å–µ–π
    const startIndex = Math.max(0, entries.length - count);
    return entries.slice(startIndex).map(formatEntryForContext).join('\n---\n');
  }
  
  const previousEntries = entries.slice(Math.max(0, currentIndex - count), currentIndex);
  console.log(`–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ ${previousEntries.length} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.`);
  return previousEntries.map(formatEntryForContext).join('\n---\n');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {Object} entry - –ó–∞–ø–∏—Å—å –∏–∑ –∂—É—Ä–Ω–∞–ª–∞
 */
function formatEntryForContext(entry) {
  return `–î–∞—Ç–∞: ${entry.id}\n` +
         `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${entry.title || entry.topic || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}\n` +
         `–¢–µ–≥–∏: ${(entry.tags || []).join(', ')}\n` +
         `–§—Ä–∞–≥–º–µ–Ω—Ç —ç—Å—Å–µ: ${(entry.essay || entry.entry || '').substring(0, 150)}...\n` +
         `–§—Ä–∞–≥–º–µ–Ω—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: ${(entry.reflection || '').substring(0, 150)}...`;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
 */
async function loadPromptTemplate() {
  try {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑:', PROMPT_TEMPLATE_PATH);
    return await fs.readFile(PROMPT_TEMPLATE_PATH, 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞:', error);
    throw error;
  }
}

/**
 * –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} template - –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
function fillPromptTemplate(template, data) {
  console.log('–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞...');
  return template
    .replace('{{entry_title}}', data.title || data.topic || '')
    .replace('{{entry_tags}}', (data.tags || []).join(', '))
    .replace('{{entry_reflection_level}}', data.reflection_level || data.level || '')
    .replace('{{entry_essay}}', data.essay || data.entry || '')
    .replace('{{entry_reflection}}', data.reflection || '')
    .replace('{{history_context}}', data.history_context || '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω
 * @param {Object} entry - –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {string} historyContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
 */
async function createAnalysisPrompt(entry, historyContext) {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–∏:', entry.id);
  const template = await loadPromptTemplate();
  
  const promptData = {
    title: entry.title,
    topic: entry.topic, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    tags: entry.tags,
    reflection_level: entry.reflection_level,
    level: entry.level, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    essay: entry.essay,
    entry: entry.entry, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    reflection: entry.reflection,
    history_context: historyContext
  };
  
  return fillPromptTemplate(template, promptData);
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ
 */
async function analyzeLatestEntry() {
  try {
    console.log('üñãÔ∏è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫—Ä–∏—Ç–∏–∫ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –∞–Ω–∞–ª–∏–∑—É –∂—É—Ä–Ω–∞–ª–∞ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å)...');
    const journal = await loadJournal();
    
    if (!journal || journal.length === 0) {
      console.log('–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç, –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const emptyAnalysis = {
        generated_at: new Date().toISOString().split('T')[0],
        error: "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç, –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
      };
      await fs.writeFile(ANALYSIS_PATH, JSON.stringify(emptyAnalysis, null, 2));
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª literary_analysis.json —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.');
      return;
    }
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    const latestEntry = journal[journal.length - 1];
    console.log(`–ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ –æ—Ç ${latestEntry.id}...`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const historyContext = createHistoryContext(journal, latestEntry.id);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    const prompt = await createAnalysisPrompt(latestEntry, historyContext);
    
    // –í—ã–∑—ã–≤–∞–µ–º LLM
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM...');
    const response = await callOpenRouter(prompt);
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    let analysisResult;
    try {
      analysisResult = JSON.parse(response);
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM:', parseError);
      console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', response);
      // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ LLM –¥–æ–±–∞–≤–∏–ª–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è)
      const jsonMatch = response.match(/\{.*\}/s);
      if (jsonMatch) {
        try {
          analysisResult = JSON.parse(jsonMatch[0]);
        } catch (secondParseError) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM');
        }
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM');
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const finalResult = {
      generated_at: new Date().toISOString().split('T')[0], // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      ...analysisResult
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await fs.writeFile(ANALYSIS_PATH, JSON.stringify(finalResult, null, 2));
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª literary_analysis.json —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞:', error);
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const errorResult = {
      generated_at: new Date().toISOString().split('T')[0],
      error: error.message,
      raw_response: error.message.includes('LLM') ? error.response : undefined
    };
    try {
      await fs.writeFile(ANALYSIS_PATH, JSON.stringify(errorResult, null, 2));
    } catch (writeError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞:', writeError);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  analyzeLatestEntry();
}

module.exports = { analyzeLatestEntry };
