// src/generation/contentGenerator.js

const { generateEssay, generateReflection } = require('../utils/openrouter');
const { parseScene } = require('../utils/sceneParser'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
const { cleanReflectionText, determineReflectionLevel } = require('../utils/textProcessor'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
const { withRetry } = require('../utils/retryHandler'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—é–¥–∞
const { MAX_RETRIES, BASE_DELAY_MS } = require('../config'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Å—Å–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
 */
async function generateContent(externalContext, mood, context) {
  const { previousSuggestions, semanticDict, criticTags } = externalContext;

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–≤–µ—Ç–æ–≤
  const staticInspirationTags = await extractTags(previousSuggestions, semanticDict); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ extractTags –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ textProcessor –∏–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–¥–µ—Å—å

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
  const clusters = [...new Set([...staticInspirationTags, ...criticTags])]
    .map(tag => semanticDict[tag]?.–∫–ª–∞—Å—Ç–µ—Ä)
    .filter(Boolean);

  const essayData = {
    previous_suggestions: previousSuggestions,
    semantic_clusters: clusters.join(', ') || '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ, –æ—Å–º—ã—Å–ª–µ–Ω–∏–µ',
    current_mood_name: mood.name,
    current_mood_description: mood.description,
    current_context: context
  };

  const rawEssay = await withRetry(() => generateEssay(essayData), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Å—Å–µ");
  if (!rawEssay || rawEssay.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —ç—Å—Å–µ (–¥–ª–∏–Ω–∞: ${rawEssay?.length || 0}).`);
  }
  console.log("üìÑ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–≥–æ —ç—Å—Å–µ:", rawEssay.length);

  // --- –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ü–µ–Ω—ã (—É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é [/SCENE]) ---
  let pose = "she is sitting curled up in a worn vintage armchair, with her legs tucked under her.";
  let setting = "a dimly lit room filled with books, the last rays of the autumn sun.";

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—é—â–µ–µ [/SCENE]
  const sceneMatch = rawEssay.match(/\[SCENE\]\s*\n(?:Pose:\s*(.*?)\s*\n)?(?:Setting:\s*(.*?)\s*\n)?\s*\[\/SCENE\]/);

  if (sceneMatch) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pose = sceneMatch[1] ? sceneMatch[1].trim().replace(/\.$/, '') : pose;
    setting = sceneMatch[2] ? sceneMatch[2].trim().replace(/\.$/, '') : setting;
    console.log(`üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Ü–µ–Ω–∞: –ü–æ–∑–∞:"${pose}", –û–±—Å—Ç–∞–Ω–æ–≤–∫–∞:"${setting}"`);
  } else {
    console.warn('‚ö†Ô∏è –ë–ª–æ–∫ [SCENE] –≤ —Ñ–æ—Ä–º–∞—Ç–µ [SCENE]\nPose: ...\nSetting: ...\n[/SCENE] –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
  }

  // –£–¥–∞–ª—è–µ–º –í–ï–°–¨ –±–ª–æ–∫ [SCENE] ... [/SCENE] –∏–∑ —Ç–µ–∫—Å—Ç–∞ —ç—Å—Å–µ
  const essayWithoutScene = rawEssay.replace(/\[SCENE\][\s\S]*?\[\/SCENE\][\s\n]*/, '').trim();

  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
  const rawReflection = await withRetry(() => generateReflection(essayWithoutScene), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
  if (!rawReflection || rawReflection.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–¥–ª–∏–Ω–∞: ${rawReflection?.length || 0}).`);
  }
  console.log("üí≠ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:", rawReflection.length);

  const reflectionWithoutLevel = cleanReflectionText(rawReflection);
  const fullEntryText = `${essayWithoutScene}\n\n${reflectionWithoutLevel}`;

  return {
    essayWithoutScene,
    reflectionWithoutLevel,
    fullEntryText,
    pose,
    setting
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∂–µ —Å—Ç–æ–∏—Ç –≤—ã–Ω–µ—Å—Ç–∏
async function extractTags(text, dictionary) {
  const lowerText = text.toLowerCase();
  const tags = new Set();

  for (const [tag, data] of Object.entries(dictionary)) {
    if (!data.—Ñ–æ—Ä–º—ã || !Array.isArray(data.—Ñ–æ—Ä–º—ã)) continue;
    for (const form of data.—Ñ–æ—Ä–º—ã) {
      const normalizedForm = form.trim().toLowerCase();
      if (normalizedForm && lowerText.includes(normalizedForm)) {
        tags.add(tag);
        break;
      }
    }
  }

  if (tags.size === 0) {
    ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"].forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}


module.exports = { generateContent };
