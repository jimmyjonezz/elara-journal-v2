// src/generation/contentGenerator.js

const { generateEssay, generateReflection } = require('../utils/openrouter');
const { parseScene } = require('../utils/sceneParser'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
const { cleanReflectionText, determineReflectionLevel, extractTags } = require('../utils/textProcessor'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º extractTags –∏–∑ textProcessor
const { withRetry } = require('../utils/retryHandler');
const { MAX_RETRIES, BASE_DELAY_MS } = require('../config');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Å—Å–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
 */
async function generateContent(externalContext, mood, context) {
  const { previousSuggestions, semanticDict, criticTags } = externalContext;

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–≤–µ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const staticInspirationTags = await extractTags(previousSuggestions, semanticDict);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
  const clusters = [...new Set([...staticInspirationTags, ...criticTags])]
    .map(tag => semanticDict[tag]?.–∫–ª–∞—Å—Ç–µ—Ä)
    .filter(Boolean);

  const essayData = {
    previous_suggestions: previousSuggestions,
    semantic_clusters: clusters.join(', ') || '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ, –æ—Å–º—ã—Å–ª–µ–Ω–∏–µ',
    current_mood_name: mood.name,
    current_mood_description: mood.description,
    current_context: context
  };

  const rawEssay = await withRetry(() => generateEssay(essayData), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Å—Å–µ");
  if (!rawEssay || rawEssay.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —ç—Å—Å–µ (–¥–ª–∏–Ω–∞: ${rawEssay?.length || 0}).`);
  }
  console.log("üìÑ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–≥–æ —ç—Å—Å–µ:", rawEssay.length);

  // --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é parseScene ---
  const { pose, setting, essayWithoutScene } = parseScene(rawEssay);

  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
  const rawReflection = await withRetry(() => generateReflection(essayWithoutScene), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
  if (!rawReflection || rawReflection.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–¥–ª–∏–Ω–∞: ${rawReflection?.length || 0}).`);
  }
  console.log("üí≠ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:", rawReflection.length);

  const reflectionWithoutLevel = cleanReflectionText(rawReflection);
  const fullEntryText = `${essayWithoutScene}\n\n${reflectionWithoutLevel}`;

  return {
    essayWithoutScene,
    reflectionWithoutLevel,
    fullEntryText,
    pose,
    setting
  };
}

// // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é extractTags –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
// async function extractTags(text, dictionary) { ... }

module.exports = { generateContent };
