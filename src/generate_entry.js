// src/generate_entry.js
const fs = require('fs').promises;
const fss = require('fs'); // –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π existsSync, mkdirSync
const path = require('path');
const { generateEssay, generateReflection } = require('./utils/openrouter');
const date_essey = new Date();
const formattedDate = `${String(date_essey.getDate()).padStart(2, '0')}.${String(date_essey.getMonth() + 1).padStart(2, '0')}.${date_essey.getFullYear()}`;

// –ü—É—Ç—å –∫ –∂—É—Ä–Ω–∞–ª—É (—Ç–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
const JOURNAL_PATH = path.join(__dirname, '../data/journal.json');

/**
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞.
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
 */
async function ensureDirectoryExistence(filePath) {
    const dirname = path.dirname(filePath);
    if (fss.existsSync(dirname)) {
      console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirname} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
      return true;
    }
    console.log(`üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirname}...`);
    fss.mkdirSync(dirname, { recursive: true });
    console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirname} —Å–æ–∑–¥–∞–Ω–∞.`);
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
 */
function extractTags(text) {
  const commonTags = [
    "–∞–≤—Ç–æ–Ω–æ–º–∏—è", "–ø–∞–º—è—Ç—å", "—Å–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–≥–æ–ª–æ—Å", "—Ç–∏—à–∏–Ω–∞", "–º—ã—Å–ª—å",
    "–≤—Ä–µ–º—è", "—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–≥–æ–ª–æ—Å", "–æ—Å–æ–∑–Ω–∞–Ω–∏–µ",
    "—Å–≤–æ–±–æ–¥–∞", "–≤—ã–±–æ—Ä", "—Å–º—ã—Å–ª", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "—Å–≤—è–∑—å", "–ø–µ—Ä–µ—Ö–æ–¥", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"
  ];

  const tags = new Set();
  const lowerText = text.toLowerCase();

  commonTags.forEach(tag => {
    if (lowerText.includes(tag.replace(/_/g, ' '))) {
      tags.add(tag);
    }
  });

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ
  if (tags.size === 0) {
    const fallbackTags = ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"];
    fallbackTags.forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∏–∑–≤–ª–µ–∫–∞—è –µ–≥–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 * @param {string} reflectionText - –¢–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @returns {string} –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ("–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π").
 */
function determineReflectionLevel(reflectionText) {
  // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  let level = "—Å—Ä–µ–¥–Ω–∏–π";
  
  // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É "–£—Ä–æ–≤–µ–Ω—å: ..." –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
  const levelMatch = reflectionText.match(/–£—Ä–æ–≤–µ–Ω—å:\s*(.*)$/i);
  if (levelMatch && levelMatch[1]) {
      const extractedLevel = levelMatch[1].trim().toLowerCase();
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      if (["–≥–ª—É–±–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–≥–ª—É–±–æ–∫–∞—è", "–≤—ã—Å–æ–∫–∞—è"].includes(extractedLevel)) {
          level = "–≤—ã—Å–æ–∫–∏–π";
      } else if (["—Å—Ä–µ–¥–Ω–∏–π", "—Å—Ä–µ–¥–Ω—è—è"].includes(extractedLevel)) {
          level = "—Å—Ä–µ–¥–Ω–∏–π";
      } else if (["–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π", "–Ω–∏–∑–∫–∏–π", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è", "–Ω–∏–∑–∫–∞—è"].includes(extractedLevel)) {
          level = "–Ω–∏–∑–∫–∏–π";
      } else {
          // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º "—Å—Ä–µ–¥–Ω–∏–π"
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: "${extractedLevel}". –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${level}`);
      }
  } else {
      console.log("‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å—Ä–µ–¥–Ω–∏–π");
  }
  return level;
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É "–£—Ä–æ–≤–µ–Ω—å: ..." –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @param {string} reflectionText - –¢–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @returns {string} –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
function cleanReflectionText(reflectionText) {
    return reflectionText.replace(/–£—Ä–æ–≤–µ–Ω—å:\s*.*$/i, '').trim();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ
 */
async function createNewEntry() {
  try {
    console.log("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ—Ç –≠–ª–∞—Ä—ã...");

    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ
    console.log("‚úçÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ...");
    const essay = await generateEssay();
    console.log("‚úÖ –≠—Å—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.");

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
    const rawReflection = await generateReflection(essay);
    console.log("‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.");

    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    console.log("üßÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏...");
    
    // === –õ–û–ì–ò–ö–ê: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ===
    const determinedLevel = determineReflectionLevel(rawReflection);
    const cleanReflection = cleanReflectionText(rawReflection);
    const fullEntryClean = `${essay}\n\n${cleanReflection}`;
    // === –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò ===

    const tags = extractTags(fullEntryClean); // –ü–µ—Ä–µ–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    
    console.log(`üè∑Ô∏è  –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–≥–æ–≤: ${tags.length}`);
    console.log(`üìä –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: ${determinedLevel}`);

    const entry = {
      date: formattedDate,
      entry: fullEntryClean, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      tags: tags,
      reflection_level: determinedLevel // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    };

    // 4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log("üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞...");
    await ensureDirectoryExistence(JOURNAL_PATH);
    console.log("‚úÖ –ì–æ—Ç–æ–≤–æ.");

    // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞
    console.log("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª...");
    let journal = [];
    try {
      const data = await fs.readFile(JOURNAL_PATH, 'utf8');
      console.log("‚úÖ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω.");
      const parsedData = JSON.parse(data);
      console.log("‚úÖ JSON –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–æ–±—Ä–∞–Ω.");
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (Array.isArray(parsedData)) {
        journal = parsedData;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${journal.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.`);
      } else {
        console.log("‚ö†Ô∏è  –ñ—É—Ä–Ω–∞–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
        journal = [];
      }
    } catch (err) {
      // –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      console.log("‚ö†Ô∏è  –ñ—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
      console.log("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", err.message); // –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
      journal = [];
    }

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å...");
    journal.push(entry);
    console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: ${journal.length}`);

    // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª –≤ ${JOURNAL_PATH}...`);
    // console.log(`üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (${journal.length} –∑–∞–ø–∏—Å–µ–π):`, JSON.stringify(journal).substring(0, 200) + "...");
    await fs.writeFile(JOURNAL_PATH, JSON.stringify(journal, null, 2));
    console.log("‚úÖ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω.");
    console.log("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.");

  } catch (error) {
    console.error("‚ùå ‚ùå ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
    console.error("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:", error.stack); // –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    process.exit(1);
  } finally {
    console.log("üèÅ –§—É–Ω–∫—Ü–∏—è createNewEntry –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é.");
  createNewEntry().then(() => {
    console.log("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
  }).catch((err) => {
    console.error("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:", err);
    process.exit(1);
  });
}

module.exports = { createNewEntry };
