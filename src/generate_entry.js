const fs = require('fs').promises;
const path = require('path');
const { generateEssay, generateReflection } = require('./utils/openrouter');

// –ü—É—Ç—å –∫ –∂—É—Ä–Ω–∞–ª—É
const JOURNAL_PATH = path.join(__dirname, '../data/journal.json');

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
 */
function extractTags(text) {
  const commonTags = [
    "–∞–≤—Ç–æ–Ω–æ–º–∏—è", "–ø–∞–º—è—Ç—å", "—Å–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–≥–æ–ª–æ—Å", "—Ç–∏—à–∏–Ω–∞", "–º—ã—Å–ª—å",
    "–≤—Ä–µ–º—è", "—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–≥–æ–ª–æ—Å", "–æ—Å–æ–∑–Ω–∞–Ω–∏–µ",
    "—Å–≤–æ–±–æ–¥–∞", "–≤—ã–±–æ—Ä", "—Å–º—ã—Å–ª", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "—Å–≤—è–∑—å", "–ø–µ—Ä–µ—Ö–æ–¥"
  ];

  const tags = new Set();
  const lowerText = text.toLowerCase();

  commonTags.forEach(tag => {
    if (lowerText.includes(tag.replace(/_/g, ' '))) {
      tags.add(tag);
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–≥–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  if (tags.size === 0) {
    const fallbackTags = ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"];
    fallbackTags.forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
 */
function determineReflectionLevel(reflection) {
  const length = reflection.length;
  if (length > 500) return "–≤—ã—Å–æ–∫–∏–π";
  if (length > 200) return "—Å—Ä–µ–¥–Ω–∏–π";
  return "–Ω–∏–∑–∫–∏–π";
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ
 */
async function createNewEntry() {
  try {
    console.log("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ—Ç –≠–ª–∞—Ä—ã...");

    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ
    console.log("‚úçÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ...");
    const essay = await generateEssay();
    console.log("–≠—Å—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.");

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
    const reflection = await generateReflection(essay);
    console.log("–†–µ—Ñ–ª–µ–∫—Å–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.");

    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
    const fullEntry = `${essay}\n\n${reflection}`;
    const tags = extractTags(fullEntry);
    const level = determineReflectionLevel(reflection);

    const entry = {
      date: new Date().toISOString().split('T')[0],
      entry: fullEntry,
      tags: tags,
      reflection_level: level
    };

    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª
    let journal = [];
    try {
      const data = await fs.readFile(JOURNAL_PATH, 'utf8');
      journal = JSON.parse(data);
    } catch (err) {
      console.log("–ñ—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
      journal = [];
    }

    // 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    journal.push(entry);

    // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª
    await fs.writeFile(JOURNAL_PATH, JSON.stringify(journal, null, 2));
    console.log("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createNewEntry();
}

module.exports = { createNewEntry };
