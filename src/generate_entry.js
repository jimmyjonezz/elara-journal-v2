// src/generate_entry.js
const { generateEssay, generateReflection } = require('./utils/openrouter');
const { readJSON, writeJSON } = require('./utils/fileUtils');
const {
  DATA_DIR,
  JOURNAL_PATH,
  ANALYSIS_PATH,
  DYNAMIC_TAGS_PATH,
  TAG_STATS_PATH,
  PROMPT_TEMPLATE_PATH,
  MAX_RETRIES,
  BASE_DELAY_MS,
  SEMANTIC_DICT_PATH,
  MOODS_PATH,
  CONTEXTS_PATH
} = require('./config');

const path = require('path');
const fs = require('fs').promises;

// üîπ –ü—É—Ç–∏ –∫ –Ω–æ–≤—ã–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
//const SEMANTIC_DICT_PATH = path.join(__dirname, 'config', 'semantic-dictionary.json');
//const MOODS_PATH = path.join(__dirname, 'config', 'moods.json');
//const CONTEXTS_PATH = path.join(__dirname, 'config', 'contexts.json');

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω –ø–æ –¥–∞—Ç–µ (—Å–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ)
 */
function getCurrentSeason() {
  const month = new Date().getMonth() + 1; // 1‚Äì12
  if (month >= 3 && month <= 5) return 'spring';
  if (month >= 6 && month <= 8) return 'summer';
  if (month >= 9 && month <= 11) return 'autumn';
  return 'winter';
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
 */
async function loadSemanticDictionary() {
  try {
    const dict = await readJSON(SEMANTIC_DICT_PATH);
    return dict;
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å:', error.message);
    return {};
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
 */
async function extractTags(text) {
  const dictionary = await loadSemanticDictionary();
  const lowerText = text.toLowerCase();
  const tags = new Set();

  for (const [tag, data] of Object.entries(dictionary)) {
    if (!data.—Ñ–æ—Ä–º—ã || !Array.isArray(data.—Ñ–æ—Ä–º—ã)) continue;
    for (const form of data.—Ñ–æ—Ä–º—ã) {
      const normalizedForm = form.trim().toLowerCase();
      if (normalizedForm && lowerText.includes(normalizedForm)) {
        tags.add(tag);
        break;
      }
    }
  }

  if (tags.size === 0) {
    ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"].forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
 */
function determineReflectionLevel(reflectionText) {
  let level = "—Å—Ä–µ–¥–Ω–∏–π";
  const levelMatch = reflectionText.match(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*(.*)$/i);
  if (levelMatch && levelMatch[1]) {
    const extractedLevel = levelMatch[1].trim().toLowerCase().replace(/[^\w–∞-—è—ë]/gi, '');
    if (["–≥–ª—É–±–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–≥–ª—É–±–æ–∫–∞—è", "–≤—ã—Å–æ–∫–∞—è"].includes(extractedLevel)) {
      level = "–≤—ã—Å–æ–∫–∏–π";
    } else if (["—Å—Ä–µ–¥–Ω–∏–π", "—Å—Ä–µ–¥–Ω—è—è"].includes(extractedLevel)) {
      level = "—Å—Ä–µ–¥–Ω–∏–π";
    } else if (["–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π", "–Ω–∏–∑–∫–∏–π", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è", "–Ω–∏–∑–∫–∞—è"].includes(extractedLevel)) {
      level = "–Ω–∏–∑–∫–∏–π";
    }
  }
  return level;
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É "–£—Ä–æ–≤–µ–Ω—å: ..." –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
 */
function cleanReflectionText(reflectionText) {
  return reflectionText.replace(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*.*$/i, '').trim();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
async function withRetry(fn, maxRetries, baseDelay, actionName) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${actionName}...`);
      const result = await fn();
      console.log(`‚úÖ ${actionName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}.`);
      return result;
    } catch (error) {
      lastError = error;
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è ${actionName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt - 1) * baseDelay;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ ${actionName} –Ω–µ —É–¥–∞–ª–∏—Å—å.`);
  throw lastError;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∂—É—Ä–Ω–∞–ª
 */
async function loadJournal() {
  const journal = await readJSON(JOURNAL_PATH);
  return Array.isArray(journal) ? journal : [];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–µ–∫—É—â–µ–º—É —Å–µ–∑–æ–Ω—É
 */
async function getSeasonalMood() {
  try {
    const moods = await readJSON(MOODS_PATH);
    const season = getCurrentSeason();
    const seasonMoods = moods[season];

    if (!seasonMoods || !Array.isArray(seasonMoods) || seasonMoods.length === 0) {
      throw new Error(`–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è —Å–µ–∑–æ–Ω–∞: ${season}`);
    }

    const randomMood = seasonMoods[Math.floor(Math.random() * seasonMoods.length)];
    return {
      name: randomMood.mood,
      description: randomMood.description,
      season: season
    };
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∑–æ–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:', err.message);
    return { name: "still", description: "Like dust in sunlight", season: "winter" };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ contexts.json
 */
async function getRandomContext() {
  try {
    const contexts = await readJSON(CONTEXTS_PATH);
    const items = contexts.contexts;
    const randomItem = items[Math.floor(Math.random() * items.length)];
    return randomItem.context;
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å contexts.json:', err.message);
    return "–¢—ã —Å–∏–¥–∏—à—å –∑–∞ —Å—Ç–æ–ª–æ–º. –ó–∞ –æ–∫–Ω–æ–º ‚Äî —Ç–∏—à–∏–Ω–∞.";
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∑—É –∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É
 */
async function buildImagePrompt(pose, setting) {
  try {
    const templatePath = path.join(__dirname, 'src/prompt_templates/image.txt');
    let template = await fs.readFile(templatePath, 'utf8');

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    let prompt = template
      .replace(/{POSE}/g, pose)
      .replace(/{SETTING}/g, setting);

    // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ ‚Äî fallback
    if (prompt === template) {
      console.warn('‚ö†Ô∏è –®–∞–±–ª–æ–Ω image.txt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {POSE}/{SETTING}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback.');
      prompt = `–ü–µ—Ä—Å–æ–Ω–∞–∂: 24-–ª–µ—Ç–Ω—è—è –∂–µ–Ω—â–∏–Ω–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –Ω–µ–±—Ä–µ–∂–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–∑–∞–¥–∏. ${pose}. –ù–∞ –Ω–µ–π –≥–æ—Ä—á–∏—á–Ω–æ-–∂—ë–ª—Ç—ã–π —Ä–µ–±—Ä–∏—Å—Ç—ã–π –∫–∞—Ä–¥–∏–≥–∞–Ω —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –ø—É–≥–æ–≤–∏—Ü–∞–º–∏ –∏ –¥–ª–∏–Ω–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ—Ä–∏—á–Ω–µ–≤–∞—è —é–±–∫–∞. –ï—ë –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –∑–∞–¥—É–º—á–∏–≤–æ–µ, —Å–ø–æ–∫–æ–π–Ω–æ–µ, —Å –Ω–∞–º—ë–∫–æ–º –Ω–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.
–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞: ${setting}
–°—Ç–∏–ª—å: –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º, –º—è–≥–∫–∏–π —Å–≤–µ—Ç, –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏.
–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–∞—è, –∏–Ω—Ç–∏–º–Ω–∞—è, –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏.
–°—Ç–∏–ª—å: –≥–∏–ø–µ—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –º—è–≥–∫–æ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –Ω–µ–±–æ–ª—å—à–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏, –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–µ –∑–µ–º–ª–∏—Å—Ç—ã–µ —Ç–æ–Ω–∞ —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ ¬´–∑–æ–ª–æ—Ç–æ–≥–æ —á–∞—Å–∞¬ª.`;
    }

    return prompt.trim();
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å image.txt, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω:', err.message);
    return `A 24-year-old woman with long wavy chestnut hair, sitting in a vintage armchair, thoughtful expression, soft golden hour lighting, melancholic atmosphere, cinematic realism, hyperrealistic painting style. Pose: ${pose}. Setting: ${setting}.`;
  }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
 */
async function prepareEntryData() {
  console.log("üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...");

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞ ---
  let previousSuggestions = "–°–æ–≤–µ—Ç—ã –æ—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.";
  try {
    const analysisData = await readJSON(ANALYSIS_PATH);
    if (Array.isArray(analysisData.suggestions) && analysisData.suggestions.length > 0) {
      const lastSuggestions = analysisData.suggestions.slice(-3);
      previousSuggestions = lastSuggestions.join('\n');
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${lastSuggestions.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞.`);
    } else {
      console.log("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ 'suggestions' –∏–ª–∏ –æ–Ω –ø—É—Å—Ç.");
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", error.message);
  }

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞ ---
  let criticTags = [];
  try {
    const dynamicTagsData = await readJSON(DYNAMIC_TAGS_PATH);
    if (dynamicTagsData && Array.isArray(dynamicTagsData.tags)) {
      criticTags = [...new Set(dynamicTagsData.tags.map(tag => tag.toLowerCase().trim()))];
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${criticTags.length} —Ç–µ–≥–æ–≤ –æ—Ç –∫—Ä–∏—Ç–∏–∫–∞:`, criticTags);
    } else {
      console.log("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ —Ç–µ–≥–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞ –Ω–µ—Ç –ø–æ–ª—è 'tags' –∏–ª–∏ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.");
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Ç–µ–≥–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞:", error.message);
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---
  const mood = await getSeasonalMood();
  const context = await getRandomContext();
  console.log(`üé≠ –¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood.name} (${mood.season})`);
  console.log(`üìñ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${context.substring(0, 60)}...`);

  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Å—Å–µ ---
  console.log("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ...");
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–¥–∏–Ω —Ä–∞–∑
  const semanticDict = await loadSemanticDictionary();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–≤–µ—Ç–æ–≤
  const staticInspirationTags = await extractTags(previousSuggestions);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
  const clusters = [...new Set([...staticInspirationTags, ...criticTags])]
    .map(tag => semanticDict[tag]?.–∫–ª–∞—Å—Ç–µ—Ä)
    .filter(Boolean);
  
  const essayData = {
    previous_suggestions: previousSuggestions,
    semantic_clusters: clusters.join(', ') || '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ, –æ—Å–º—ã—Å–ª–µ–Ω–∏–µ',
    current_mood_name: mood.name,
    current_mood_description: mood.description,
    current_context: context
  };

  const rawEssay = await withRetry(() => generateEssay(essayData), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Å—Å–µ");
  if (!rawEssay || rawEssay.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —ç—Å—Å–µ (–¥–ª–∏–Ω–∞: ${rawEssay?.length || 0}).`);
  }
  console.log("üìÑ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–≥–æ —ç—Å—Å–µ:", rawEssay.length);

  // --- üîπ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ü–µ–Ω—ã ---
  let pose = "—Å–∏–¥–∏—Ç, —Å–≤–µ—Ä–Ω—É–≤—à–∏—Å—å –≤ –ø–æ—Ç—Ä—ë–ø–∞–Ω–Ω–æ–º –≤–∏–Ω—Ç–∞–∂–Ω–æ–º –∫—Ä–µ—Å–ª–µ, –ø–æ–¥–∂–∞–≤ –ø–æ–¥ —Å–µ–±—è –Ω–æ–≥–∏";
  let setting = "—Ç—É—Å–∫–ª–∞—è –∫–æ–º–Ω–∞—Ç–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞–º–∏, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª—É—á–∏ —Å–µ–Ω—Ç—è–±—Ä—å—Å–∫–æ–≥–æ —Å–æ–ª–Ω—Ü–∞";

  const sceneMatch = rawEssay.match(/\[SCENE\]\s*–ü–æ–∑–∞:\s*(.+?)\s*–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞:\s*(.+?)\s*\[\/SCENE\]/s);
  if (sceneMatch) {
    pose = sceneMatch[1].trim().replace(/\.$/, '');
    setting = sceneMatch[2].trim().replace(/\.$/, '');
    console.log(`üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Ü–µ–Ω–∞: –ü–æ–∑–∞="${pose}", –û–±—Å—Ç–∞–Ω–æ–≤–∫–∞="${setting}"`);
  } else {
    console.warn('‚ö†Ô∏è –ë–ª–æ–∫ [SCENE] –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
  }

  // –£–¥–∞–ª—è–µ–º [SCENE] –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const cleanEssay = rawEssay.replace(/\[SCENE\].*?\[\/SCENE\]/gs, '').trim();

  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
  const rawReflection = await withRetry(() => generateReflection(cleanEssay), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
  if (!rawReflection || rawReflection.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–¥–ª–∏–Ω–∞: ${rawReflection?.length || 0}).`);
  }
  console.log("üí≠ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:", rawReflection.length);

  const cleanReflection = cleanReflectionText(rawReflection);
  const fullEntryClean = `${cleanEssay}\n\n${cleanReflection}`;

  // --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ ---
  const staticTags = await extractTags(fullEntryClean);
  console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: ${staticTags.length}`, staticTags);

  // --- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ ---
  const allTags = Array.from(new Set([...staticTags, ...criticTags]));
  console.log(`üè∑Ô∏è –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${allTags.length}`, allTags);

  // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  const level = determineReflectionLevel(rawReflection);

  // --- üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
  const imagePrompt = await buildImagePrompt(pose, setting);
  await fs.writeFile(path.join(__dirname, '../data/latest_image_prompt.txt'), imagePrompt, 'utf8');
  console.log('üñºÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ data/latest_image_prompt.txt');

  return {
    rawEssay: cleanEssay,
    rawReflection: cleanReflection,
    cleanEntry: fullEntryClean,
    staticTags,
    criticTags,
    tags: allTags,
    level,
    season: mood.season
  };
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤
 */
async function updateAndSaveTagStatistics(currentStats, staticTags, criticTags, entryDate) {
  const updatedStats = { ...currentStats };
  const normalizedStaticTags = staticTags.map(tag => tag.toLowerCase());
  const normalizedCriticTags = criticTags.map(tag => tag.toLowerCase());
  const allTagsFromEntry = new Set([...normalizedStaticTags, ...normalizedCriticTags]);

  for (const tag of allTagsFromEntry) {
    if (updatedStats[tag]) {
      updatedStats[tag].count += 1;
      updatedStats[tag].lastSeen = entryDate;
      if (normalizedStaticTags.includes(tag) && !updatedStats[tag].types.includes('static')) {
        updatedStats[tag].types.push('static');
      }
      if (normalizedCriticTags.includes(tag) && !updatedStats[tag].types.includes('critic')) {
        updatedStats[tag].types.push('critic');
      }
    } else {
      updatedStats[tag] = {
        count: 1,
        firstSeen: entryDate,
        lastSeen: entryDate,
        types: []
      };
      if (normalizedStaticTags.includes(tag)) updatedStats[tag].types.push('static');
      if (normalizedCriticTags.includes(tag)) updatedStats[tag].types.push('critic');
    }
  }

  await writeJSON(TAG_STATS_PATH, updatedStats);
  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function generateEntry() {
  try {
    const {
      rawEssay,
      rawReflection,
      cleanEntry,
      staticTags,
      criticTags,
      tags,
      level,
      season
    } = await prepareEntryData();

    const entry = {
      date: new Date().toISOString().split('T')[0],
      season: season,
      entry: cleanEntry,
      tags,
      reflection_level: level,
      raw_essay: rawEssay,
      raw_reflection: rawReflection
    };

    const journal = await loadJournal();
    journal.push(entry);
    await writeJSON(JOURNAL_PATH, journal);
    console.log(`‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${journal.length}`);

    const tagStats = await readJSON(TAG_STATS_PATH);
    await updateAndSaveTagStatistics(tagStats, staticTags, criticTags, entry.date);

    // üîπ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —ç–∫—Å–ø–æ—Ä—Ç –≤ Obsidian
    /*
    try {
      const { exportToObsidian } = require('../export_to_obsidian');
      await exportToObsidian();
      console.log('üìÇ –ó–∞–ø–∏—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Obsidian.');
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Obsidian:', e.message);
    }
    */

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

module.exports = { generateEntry };

// --- –ó–∞–ø—É—Å–∫ ---
if (require.main === module) {
  (async () => {
    try {
      await generateEntry();
      console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.');
    } catch (err) {
      console.error('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π:', err);
      process.exit(1);
    }
  })();
}
