// src/generate_entry.js
const fs = require('fs/promises');
const path = require('path');
const { generateEssay, generateReflection } = require('./utils/openrouter');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const JOURNAL_PATH = path.join(__dirname, '../data/journal.json');
const TAG_STATS_PATH = path.join(__dirname, '../data/tag_statistics.json');
const ANALYSIS_PATH = path.join(__dirname, '../data/literary_analysis.json');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
const MAX_RETRIES = 3;
const BASE_DELAY_MS = 2000;

/**
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞.
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
 */
async function ensureDirectoryExistence(filePath) {
  const dirname = path.dirname(filePath);
  try {
    await fs.access(dirname);
  } catch (err) {
    if (err.code === 'ENOENT') {
      await fs.mkdir(dirname, { recursive: true });
    } else {
      throw err;
    }
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
 * @returns {string[]} - –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤.
 */
function extractTags(text) {
  const commonTags = [
    "—Å—É–¥—å–±–∞", "–ø–∞–º—è—Ç—å", "—Å–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–≥–æ–ª–æ—Å", "–Ω–æ—á—å", "–º—ã—Å–ª—å",
    "–≤—Ä–µ–º—è", "–ª—é–±–æ–≤—å", "–∂–∏–∑–Ω—å", "–≥—Ä—É—Å—Ç—å", "–æ—Å–æ–∑–Ω–∞–Ω–∏–µ",
    "—Å–≤–æ–±–æ–¥–∞", "–≤—ã–±–æ—Ä", "—Å–º—ã—Å–ª", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–Ω–æ—Å—Ç–∞–ª—å–≥–∏—è", "–≤–µ—Ç–µ—Ä", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"
  ];

  const tags = new Set();
  const lowerText = text.toLowerCase();

  for (const tag of commonTags) {
    if (lowerText.includes(tag.replace(/_/g, ' '))) {
      tags.add(tag);
    }
  }

  if (tags.size === 0) {
    const fallbackTags = ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"];
    fallbackTags.forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
 * @returns {string[]} - –ú–∞—Å—Å–∏–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.
 */
function extractSimpleDynamicTags(text) {
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ)
  const stopWords = new Set([
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–≥–∏, —Å–æ—é–∑—ã, —á–∞—Å—Ç–∏—Ü—ã
    "–∏", "–≤", "–Ω–∞", "—Å", "–∫", "–ø–æ", "–Ω–æ", "–∑–∞", "–æ", "–æ—Ç", "–¥–ª—è", "–ø—Ä–æ", "–ø–æ–¥", "—Å–æ", "–∏–∑",
    // –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
    "—è", "–º—ã", "—Ç—ã", "–æ–Ω", "–æ–Ω–∞", "–æ–Ω–æ", "–æ–Ω–∏",
    "–º–µ–Ω—è", "—Ç–µ–±—è", "–µ–≥–æ", "–Ω–µ–µ", "–Ω–∞—Å", "–≤–∞—Å", "–∏—Ö",
    "–º–Ω–µ", "—Ç–µ–±–µ", "–µ–º—É", "–Ω–∞–º", "–≤–∞–º", "–∏–º",
    "–º–Ω–æ–π", "–º–Ω–æ—é", "—Ç–æ–±–æ–π", "—Ç–æ–±–æ—é", "–Ω–∏–º", "–Ω–µ–π", "–Ω–∞–º–∏", "–≤–∞–º–∏", "–∏–º–∏",
    "–º–æ–π", "–º–æ—è", "–º–æ—ë", "–º–æ–∏", "—Ç–≤–æ–π", "—Ç–≤–æ—è", "—Ç–≤–æ—ë", "—Ç–≤–æ–∏",
    "–µ—ë", "–µ–≥–æ", "–∏—Ö", "–Ω–∞—à", "–Ω–∞—à–∞", "–Ω–∞—à–µ", "–Ω–∞—à–∏", "–≤–∞—à", "–≤–∞—à–∞", "–≤–∞—à–µ", "–≤–∞—à–∏",
    "—Å–µ–±—è", "—Å–µ–±–µ", "—Å–æ–±–æ–π", "—Å–æ–±–æ—é",
    // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
    "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä–∞—è", "–∫–æ—Ç–æ—Ä–æ–µ", "–∫–æ—Ç–æ—Ä—ã–µ",
    // –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    "–∫—Ç–æ", "—á—Ç–æ", "–∫–∞–∫–æ–π", "—á–µ–π", "–≥–¥–µ", "–∫—É–¥–∞", "–æ—Ç–∫—É–¥–∞", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º",
    // –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    "—ç—Ç–æ—Ç", "—ç—Ç–∞", "—ç—Ç–æ", "—ç—Ç–∏", "—Ç–æ—Ç", "—Ç–∞", "—Ç–µ",
    "–≤–µ—Å—å", "–≤—Å—è", "–≤—Å—ë", "–≤—Å–µ", "–≤—Å–µ—Ö", "–≤—Å–µ–º", "–≤—Å–µ–º–∏", "–≤—Å—è", "–≤—Å—é", "–≤—Å–µ—é",
    "—Å–∞–º", "—Å–∞–º–∞", "—Å–∞–º–æ", "—Å–∞–º–∏",
    // –ù–∞—Ä–µ—á–∏—è –∏ —á–∞—Å—Ç–∏—Ü—ã
    "–Ω–µ", "–∂–µ", "–±—ã", "–ª–∏", "–ª—å", "—É–∂–µ", "–µ—â—ë", "—Ç–æ–ª—å–∫–æ", "–¥–∞–∂–µ", "–≤—Å–µ–≥–æ", "–ª–∏—à—å",
    "–æ—á–µ–Ω—å", "–±–æ–ª–µ–µ", "–º–µ–Ω–µ–µ", "—Å–ª–∏—à–∫–æ–º", "–¥–æ–≤–æ–ª—å–Ω–æ", "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ",
    // –î—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    "–±—ã—Ç—å", "–∫–∞–∫", "—Ç–æ", "—ç—Ç–æ", "–±—ã–ª–æ", "–Ω–µ–≥–æ", "–Ω–∏—Ö", "–Ω–µ–µ", "–∏–º–∏", "–Ω–∏–º", "—Ç–∞–∫", "–µ–≥–æ", "–∏–ª–∏",
    "—Ç–∞–∫–∂–µ", "—Ç–æ–∂–µ", "–∑–∞—Ç–æ", "–æ–¥–Ω–∞–∫–æ"
  ]);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞
  const words = text.toLowerCase().match(/[–∞-—è—ëa-z]+/g) || [];
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
  const wordCount = {};
  words.forEach(word => {
    if (!stopWords.has(word)) {
      wordCount[word] = (wordCount[word] || 0) + 1;
    }
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ (—É–≤–µ–ª–∏—á–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥)
  const sortedWords = Object.entries(wordCount).sort((a, b) => b[1] - a[1]);
  // const minFrequency = 1; // –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const minFrequency = 2; // –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö —Ç–µ–≥–æ–≤
  
  const dynamicTags = [];
  for (const [word, count] of sortedWords) {
    if (count >= minFrequency) {
      dynamicTags.push(word);
    }
  }

  return Array.from(new Set(dynamicTags)); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @param {string} reflectionText - –¢–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @returns {string} - –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ("–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π").
 */
function determineReflectionLevel(reflectionText) {
  let level = "—Å—Ä–µ–¥–Ω–∏–π";
  const levelMatch = reflectionText.match(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*(.*)$/i);
  if (levelMatch && levelMatch[1]) {
    const extractedLevel = levelMatch[1].trim().toLowerCase();
    if (["–≥–ª—É–±–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–≥–ª—É–±–æ–∫–∞—è", "–≤—ã—Å–æ–∫–∞—è"].includes(extractedLevel)) {
      level = "–≤—ã—Å–æ–∫–∏–π";
    } else if (["—Å—Ä–µ–¥–Ω–∏–π", "—Å—Ä–µ–¥–Ω—è—è"].includes(extractedLevel)) {
      level = "—Å—Ä–µ–¥–Ω–∏–π";
    } else if (["–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π", "–Ω–∏–∑–∫–∏–π", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è", "–Ω–∏–∑–∫–∞—è"].includes(extractedLevel)) {
      level = "–Ω–∏–∑–∫–∏–π";
    }
  }
  return level;
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É "–£—Ä–æ–≤–µ–Ω—å: ..." –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @param {string} reflectionText - –¢–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @returns {string} - –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
function cleanReflectionText(reflectionText) {
  return reflectionText.replace(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*.*$/i, '').trim();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 * @param {Function} fn - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 * @param {number} maxRetries - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
 * @param {number} baseDelay - –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å).
 * @param {string} actionName - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–≥–æ–≤.
 * @returns {Promise<any>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
 */
async function withRetry(fn, maxRetries, baseDelay, actionName) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${actionName}...`);
      const result = await fn();
      console.log(`‚úÖ ${actionName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}.`);
      return result;
    } catch (error) {
      lastError = error;
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è ${actionName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt - 1) * baseDelay;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ ${actionName} –Ω–µ —É–¥–∞–ª–∏—Å—å.`);
  throw lastError;
}

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
 * @returns {Promise<{rawEssay: string, rawReflection: string, cleanEntry: string, staticTags: string[], dynamicTags: string[], tags: string[], level: string}>}
 */
async function prepareEntryData() {
  console.log("üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...");
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  let previousSuggestions = "–°–æ–≤–µ—Ç—ã –æ—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.";
  try {
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ –∏–∑: ${ANALYSIS_PATH}`);
    const analysisData = await fs.readFile(ANALYSIS_PATH, 'utf8');
    if (analysisData.trim()) {
      const parsedAnalysis = JSON.parse(analysisData);
      if (Array.isArray(parsedAnalysis.suggestions) && parsedAnalysis.suggestions.length > 0) {
        const lastSuggestions = parsedAnalysis.suggestions.slice(-3);
        previousSuggestions = lastSuggestions.join('\n');
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${lastSuggestions.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞.`);
      } else {
         console.log("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ 'suggestions' –∏–ª–∏ –æ–Ω –ø—É—Å—Ç.");
      }
    } else {
       console.log("‚ö†Ô∏è –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç.");
    }
  } catch (err) {
    if (err.code !== 'ENOENT') {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", err.message);
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ
  console.log("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ...");
  const essayData = { previous_suggestions: previousSuggestions };
  const rawEssay = await withRetry(
    () => generateEssay(essayData),
    MAX_RETRIES,
    BASE_DELAY_MS,
    "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Å—Å–µ"
  );
  
  if (!rawEssay || rawEssay.trim().length < 10) {
     throw new Error(`–ü–æ–ª—É—á–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Å—Å–µ (–¥–ª–∏–Ω–∞: ${rawEssay?.length || 0}).`);
  }
  console.log("üìÑ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–≥–æ —ç—Å—Å–µ:", rawEssay.length);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
  console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
  const rawReflection = await withRetry(
    () => generateReflection(rawEssay),
    MAX_RETRIES,
    BASE_DELAY_MS,
    "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"
  );

  if (!rawReflection || rawReflection.trim().length < 10) {
     throw new Error(`–ü–æ–ª—É—á–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–¥–ª–∏–Ω–∞: ${rawReflection?.length || 0}).`);
  }
  console.log("üí≠ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:", rawReflection.length);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
  console.log("üßÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏...");
  const determinedLevel = determineReflectionLevel(rawReflection);
  const cleanReflection = cleanReflectionText(rawReflection);
  const fullEntryClean = `${rawEssay}\n\n${cleanReflection}`;
  console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", fullEntryClean.length);

  // –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  const staticTags = extractTags(fullEntryClean);
  console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: ${staticTags.length}`);

  const dynamicTags = extractSimpleDynamicTags(fullEntryClean);
  console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: ${dynamicTags.length}`);
  
  const allUniqueTags = Array.from(new Set([...staticTags, ...dynamicTags]));
  console.log(`üè∑Ô∏è –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${allUniqueTags.length}`);

  console.log(`üìä –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: ${determinedLevel}`);

  return {
    rawEssay,
    rawReflection,
    cleanEntry: fullEntryClean,
    staticTags,
    dynamicTags,
    tags: allUniqueTags,
    level: determinedLevel
  };
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª.
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π.
 */
async function loadJournal() {
  console.log("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª...");
  let journal = [];
  try {
    const data = await fs.readFile(JOURNAL_PATH, 'utf8');
    const parsedData = JSON.parse(data);
    if (Array.isArray(parsedData)) {
      journal = parsedData;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${journal.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.`);
    } else {
      console.log("‚ö†Ô∏è –ñ—É—Ä–Ω–∞–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
    }
  } catch (err) {
    if (err.code !== 'ENOENT') {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.", err.message);
    }
  }
  return journal;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª.
 * @param {Array} journal - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π.
 */
async function saveJournal(journal) {
  await ensureDirectoryExistence(JOURNAL_PATH);
  await fs.writeFile(JOURNAL_PATH, JSON.stringify(journal, null, 2));
  console.log("‚úÖ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω.");
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–µ–≥–æ–≤.
 */
async function loadTagStatistics() {
  try {
    const data = await fs.readFile(TAG_STATS_PATH, 'utf8');
    return JSON.parse(data);
  } catch (err) {
    if (err.code !== 'ENOENT') {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.", err.message);
    }
    return {};
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤ (—Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º).
 * @param {Object} currentStats - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
 * @param {string[]} staticTags - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
 * @param {string[]} dynamicTags - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
 * @param {string} entryDate - –î–∞—Ç–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
 */
async function updateAndSaveTagStatistics(currentStats, staticTags, dynamicTags, entryDate) {
  console.log("üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤...");
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const updatedStats = { ...currentStats };
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
  const allTagsFromEntry = new Set([...staticTags, ...dynamicTags]);
  
  console.log(`üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è ${allTagsFromEntry.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∑–∞–ø–∏—Å–∏ –æ—Ç ${entryDate}...`);
  console.log(`üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –¢–µ–≥–∏ –∑–∞–ø–∏—Å–∏: [${Array.from(allTagsFromEntry).join(', ')}]`);

  // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ –±—ã–ª–æ (–∏–ª–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç)
  if (allTagsFromEntry.size === 0) {
      console.log("üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
  } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞ –∏–∑ –∑–∞–ø–∏—Å–∏
      for (const tag of allTagsFromEntry) {
          if (updatedStats[tag]) {
              // –¢–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –¥–∞—Ç—É
              updatedStats[tag].count += 1;
              updatedStats[tag].lastSeen = entryDate;
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              if (staticTags.includes(tag) && !updatedStats[tag].types.includes('static')) {
                  updatedStats[tag].types.push('static');
              }
              if (dynamicTags.includes(tag) && !updatedStats[tag].types.includes('dynamic')) {
                  updatedStats[tag].types.push('dynamic');
              }
          } else {
              // –ù–æ–≤—ã–π —Ç–µ–≥, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
              updatedStats[tag] = {
                  count: 1,
                  firstSeen: entryDate,
                  lastSeen: entryDate,
                  types: []
              };
              if (staticTags.includes(tag)) updatedStats[tag].types.push('static');
              if (dynamicTags.includes(tag)) updatedStats[tag].types.push('dynamic');
          }
      }
  }

  console.log("üíæ [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", JSON.stringify(updatedStats, null, 2));

  try {
      await ensureDirectoryExistence(TAG_STATS_PATH);
      await fs.writeFile(TAG_STATS_PATH, JSON.stringify(updatedStats, null, 2));
      console.log("‚úÖ [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
  } catch (err) {
      console.error("‚ùå [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤:", err.message);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ.
 */
async function createNewEntry() {
  console.log("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ—Ç –≠–ª–∞—Ä—ã...");

  try {
    const { rawEssay, rawReflection, cleanEntry, staticTags, dynamicTags, tags, level } = await prepareEntryData();

    const entry = {
      date: new Date().toISOString().split('T')[0],
      entry: cleanEntry,
      tags: tags,
      reflection_level: level,
      raw_essay: rawEssay,
      raw_reflection: rawReflection
    };

    const journal = await loadJournal();
    const tagStats = await loadTagStatistics();

    journal.push(entry);
    console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: ${journal.length}`);

    await saveJournal(journal);
    await updateAndSaveTagStatistics(tagStats, staticTags, dynamicTags, entry.date);

    console.log("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.");

  } catch (error) {
    console.error("‚ùå ‚ùå ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
    console.error("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:", error.stack);
    throw error;
  } finally {
    console.log("üèÅ –§—É–Ω–∫—Ü–∏—è createNewEntry –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
module.exports = { createNewEntry };

if (require.main === module) {
  console.log("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é.");
  (async () => {
    try {
      await createNewEntry();
      console.log("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
    } catch (err) {
      console.error("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:", err);
      process.exit(1);
    }
  })();
}
