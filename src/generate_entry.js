// src/generate_entry.js
// –ò—Å–ø–æ–ª—å–∑—É–µ–º fs/promises –Ω–∞–ø—Ä—è–º—É—é
const fs = require('fs/promises');
const path = require('path');
const { generateEssay, generateReflection } = require('./utils/openrouter');

// –ü—É—Ç—å –∫ –∂—É—Ä–Ω–∞–ª—É
const JOURNAL_PATH = path.join(__dirname, '../data/journal.json');
// –ù–û–í–û–ï: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤
const TAG_STATS_PATH = path.join(__dirname, '../data/tag_statistics.json');
// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
const MAX_RETRIES = 3;
// –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
const BASE_DELAY_MS = 2000;

/**
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ).
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
 */
async function ensureDirectoryExistence(filePath) {
  const dirname = path.dirname(filePath);
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ —á—Ç–µ–Ω–∏–µ (–∏–ª–∏ –ª—é–±—É—é –æ–ø–µ—Ä–∞—Ü–∏—é) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    await fs.access(dirname);
    console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirname} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log(`üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirname}...`);
      try {
        await fs.mkdir(dirname, { recursive: true });
        console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirname} —Å–æ–∑–¥–∞–Ω–∞.`);
      } catch (mkdirErr) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirname}:`, mkdirErr.message);
        throw mkdirErr; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
      }
    } else {
      // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirname}:`, err.message);
      throw err;
    }
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
 * @returns {string[]} - –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤.
 */
function extractTags(text) {
  const commonTags = [
    "–∞–≤—Ç–æ–Ω–æ–º–∏—è", "–ø–∞–º—è—Ç—å", "—Å–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–≥–æ–ª–æ—Å", "—Ç–∏—à–∏–Ω–∞", "–º—ã—Å–ª—å",
    "–≤—Ä–µ–º—è", "—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–≥–æ–ª–æ—Å", "–æ—Å–æ–∑–Ω–∞–Ω–∏–µ",
    "—Å–≤–æ–±–æ–¥–∞", "–≤—ã–±–æ—Ä", "—Å–º—ã—Å–ª", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "—Å–≤—è–∑—å", "–ø–µ—Ä–µ—Ö–æ–¥", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"
  ];

  const tags = new Set();
  const lowerText = text.toLowerCase();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º for...of –¥–ª—è –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
  for (const tag of commonTags) {
    if (lowerText.includes(tag.replace(/_/g, ' '))) {
      tags.add(tag);
    }
  }

  if (tags.size === 0) {
    const fallbackTags = ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"];
    fallbackTags.forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
 * @returns {string[]} - –ú–∞—Å—Å–∏–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.
 */
function extractSimpleDynamicTags(text) {
  // –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ –æ—á–µ–Ω—å —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤ (—Å—Ç–æ–ø-—Å–ª–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±—É–¥–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
  const stopWords = new Set([
    "–∏", "–≤", "–Ω–∞", "—Å", "–∫–∞–∫", "—Ç–æ", "—ç—Ç–æ", "–∫", "–ø–æ", "–Ω–æ", "–∑–∞", "–æ", "–æ—Ç", "–¥–ª—è",
    "–Ω–µ", "–∂–µ", "–±—ã", "–ª–∏", "–±—ã—Ç—å", "–µ—â—ë", "—É–∂–µ", "–∏–ª–∏", "–ø–æ–¥", "–ø—Ä–æ", "—Å–æ", "–∏–∑",
    "–∞", "–Ω–æ", "—á—Ç–æ", "–æ–Ω", "–∫–∞–∫", "–º–æ–π", "–≤–µ—Å—å", "–æ–Ω–∞", "—Ç–∞–∫", "–µ–≥–æ", "—Ç–æ–ª—å–∫–æ",
    "–±—ã–ª–æ", "–Ω–µ–≥–æ", "–Ω–∏—Ö", "–Ω–µ–µ", "–∏–º–∏", "–Ω–∏—Ö", "–Ω–∏–º", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö",
    "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö", "–Ω–∏—Ö",
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —Ç–æ–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã
    "the", "a", "an", "and", "or", "but", "in", "on", "at", "to", "for", "of", "with",
    "by", "is", "are", "was", "were", "be", "been", "have", "has", "had", "do", "does",
    "did", "will", "would", "could", "should", "may", "might", "must", "can",
    // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫–∞–∂—É—Ç—Å—è –∑–Ω–∞—á–∏–º—ã–º–∏ –∫–∞–∫ —Ç–µ–≥–∏
  ]);

  const dynamicTags = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

  // 1. –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  // \b[–∞-—è—ëa-z]+\b –∏—â–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–∫–≤ (—Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö)
  const words = text.toLowerCase().match(/\b[–∞-—è—ëa-z]+\b/g) || [];

  // 2. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤
  const wordCount = {};
  words.forEach(word => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    if (stopWords.has(word)) return;
    wordCount[word] = (wordCount[word] || 0) + 1;
  });

  // 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
  const sortedWords = Object.entries(wordCount)
    .sort((a, b) => b[1] - a[1]); // b[1] –∏ a[1] - —ç—Ç–æ —á–∞—Å—Ç–æ—Ç—ã

  // 4. –ë–µ—Ä–µ–º —Å–ª–æ–≤–∞ —Å —á–∞—Å—Ç–æ—Ç–æ–π >= 2
  const minFrequency = 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–≥–∞
  for (const [word, count] of sortedWords) {
    if (count >= minFrequency) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–æ –≤ "snake_case" –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å commonTags
        const tag = word.replace(/\s+/g, '_'); 
        dynamicTags.add(tag);
    }
  }

  return Array.from(dynamicTags);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∏–∑–≤–ª–µ–∫–∞—è –µ–≥–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 * @param {string} reflectionText - –¢–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @returns {string} - –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ("–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π").
 */
function determineReflectionLevel(reflectionText) {
  let level = "—Å—Ä–µ–¥–Ω–∏–π";
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ ':'
  const levelMatch = reflectionText.match(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*(.*)$/i);
  if (levelMatch && levelMatch[1]) {
    const extractedLevel = levelMatch[1].trim().toLowerCase();
    if (["–≥–ª—É–±–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–≥–ª—É–±–æ–∫–∞—è", "–≤—ã—Å–æ–∫–∞—è"].includes(extractedLevel)) {
      level = "–≤—ã—Å–æ–∫–∏–π";
    } else if (["—Å—Ä–µ–¥–Ω–∏–π", "—Å—Ä–µ–¥–Ω—è—è"].includes(extractedLevel)) {
      level = "—Å—Ä–µ–¥–Ω–∏–π";
    } else if (["–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π", "–Ω–∏–∑–∫–∏–π", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è", "–Ω–∏–∑–∫–∞—è"].includes(extractedLevel)) {
      level = "–Ω–∏–∑–∫–∏–π";
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: "${extractedLevel}". –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${level}`);
    }
  } else {
    console.log("‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å—Ä–µ–¥–Ω–∏–π");
  }
  return level;
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É "–£—Ä–æ–≤–µ–Ω—å: ..." –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @param {string} reflectionText - –¢–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.
 * @returns {string} - –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
function cleanReflectionText(reflectionText) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  return reflectionText.replace(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*.*$/i, '').trim();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 * @param {Function} fn - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 * @param {number} maxRetries - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
 * @param {number} baseDelay - –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å).
 * @param {string} actionName - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–≥–æ–≤.
 * @returns {Promise<any>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
 */
async function withRetry(fn, maxRetries, baseDelay, actionName) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${actionName}...`);
      const result = await fn();
      console.log(`‚úÖ ${actionName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}.`);
      return result;
    } catch (error) {
      lastError = error;
      console.warn(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è ${actionName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt - 1) * baseDelay; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ ${actionName} –Ω–µ —É–¥–∞–ª–∏—Å—å.`);
  throw lastError;
}

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Å—Å–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é.
 * @returns {Promise<{rawEssay: string, rawReflection: string, cleanEntry: string, staticTags: string[], dynamicTags: string[], tags: string[], level: string}>}
 */
async function prepareEntryData() {
  // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  console.log("‚úçÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Å—Å–µ...");
  const rawEssay = await withRetry(
    generateEssay,
    MAX_RETRIES,
    BASE_DELAY_MS,
    "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Å—Å–µ"
  );
  
  // --- –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É/–æ–±—Ä–µ–∑–∞–Ω–Ω–æ—Å—Ç—å —ç—Å—Å–µ ---
  if (!rawEssay || rawEssay.trim().length < 10) { // –ü—Ä–∏–º–µ—Ä: –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
     const errorMsg = `–ü–æ–ª—É—á–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Å—Å–µ (–¥–ª–∏–Ω–∞: ${rawEssay?.length || 0}).`;
     console.error(`‚ùå ${errorMsg}`);
     throw new Error(errorMsg);
  }
  console.log("üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —ç—Å—Å–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):", rawEssay.substring(0, 100) + (rawEssay.length > 100 ? "..." : ""));
  console.log("üìÑ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–≥–æ —ç—Å—Å–µ:", rawEssay.length);
  // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

  // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
  const rawReflection = await withRetry(
    () => generateReflection(rawEssay), // –ü–µ—Ä–µ–¥–∞–µ–º —ç—Å—Å–µ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    MAX_RETRIES,
    BASE_DELAY_MS,
    "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"
  );

  // --- –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É/–æ–±—Ä–µ–∑–∞–Ω–Ω–æ—Å—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  if (!rawReflection || rawReflection.trim().length < 10) {
     const errorMsg = `–ü–æ–ª—É—á–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–¥–ª–∏–Ω–∞: ${rawReflection?.length || 0}).`;
     console.error(`‚ùå ${errorMsg}`);
     throw new Error(errorMsg);
  }
  console.log("üí≠ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):", rawReflection.substring(0, 100) + (rawReflection.length > 100 ? "..." : ""));
  console.log("üí≠ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:", rawReflection.length);
  // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

  // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
  console.log("üßÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏...");
  const determinedLevel = determineReflectionLevel(rawReflection);
  const cleanReflection = cleanReflectionText(rawReflection);
  const fullEntryClean = `${rawEssay}\n\n${cleanReflection}`;

  // --- –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
  const staticTags = extractTags(fullEntryClean); // <-- 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
  console.log(`üè∑Ô∏è  –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: ${staticTags.length}`);

  const dynamicTags = extractSimpleDynamicTags(fullEntryClean); // <-- 2. –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
  console.log(`üè∑Ô∏è  –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: ${dynamicTags.length}`, dynamicTags);
  
  // 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const allUniqueTags = Array.from(new Set([...staticTags, ...dynamicTags]));
  console.log(`üè∑Ô∏è  –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${allUniqueTags.length}`);
  // --- –ö–û–ù–ï–¶ –ì–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

  console.log(`üìä –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: ${determinedLevel}`);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  return {
    rawEssay,
    rawReflection,
    cleanEntry: fullEntryClean,
    staticTags, // <-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    dynamicTags, // <-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    tags: allUniqueTags, // <-- –ò—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
    level: determinedLevel
  };
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª.
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π.
 */
async function loadJournal() {
  console.log("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª...");
  let journal = [];
  try {
    const data = await fs.readFile(JOURNAL_PATH, 'utf8');
    console.log("‚úÖ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω.");
    const parsedData = JSON.parse(data);
    console.log("‚úÖ JSON –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–æ–±—Ä–∞–Ω.");
    if (Array.isArray(parsedData)) {
      journal = parsedData;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${journal.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.`);
    } else {
      console.log("‚ö†Ô∏è  –ñ—É—Ä–Ω–∞–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
    }
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log("üì≠ –ñ—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.");
    } else {
      console.log("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON). –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
      console.log("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", err.message);
    }
  }
  return journal;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª.
 * @param {Array} journal - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π.
 */
async function saveJournal(journal) {
  // 1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  console.log("üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞...");
  await ensureDirectoryExistence(JOURNAL_PATH);
  console.log("‚úÖ –ì–æ—Ç–æ–≤–æ.");

  // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª –≤ ${JOURNAL_PATH}...`);
  await fs.writeFile(JOURNAL_PATH, JSON.stringify(journal, null, 2));
  console.log("‚úÖ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω.");
}

// --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –¢–ï–ì–û–í ---

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∏ - —Ç–µ–≥–∏, –∑–Ω–∞—á–µ–Ω–∏—è - { count: number, lastSeen: string(date) }.
 */
async function loadTagStatistics() {
  try {
    const data = await fs.readFile(TAG_STATS_PATH, 'utf8');
    const stats = JSON.parse(data);
    console.log("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
    return stats;
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log("üì≠ –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.");
    } else {
      console.warn("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.", err.message);
    }
    return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤.
 * @param {Object} currentStats - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–∑ loadTagStatistics).
 * @param {string[]} staticTags - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
 * @param {string[]} dynamicTags - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
 * @param {string} entryDate - –î–∞—Ç–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
 */
async function updateAndSaveTagStatistics(currentStats, staticTags, dynamicTags, entryDate) {
  const updatedStats = { ...currentStats }; // –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
  const allTagsFromEntry = new Set([...staticTags, ...dynamicTags]); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∑–∞–ø–∏—Å–∏

  console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è ${allTagsFromEntry.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∑–∞–ø–∏—Å–∏ –æ—Ç ${entryDate}...`);

  for (const tag of allTagsFromEntry) {
    if (updatedStats[tag]) {
      updatedStats[tag].count += 1;
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –≤ –∫–∞–∫–∏—Ö —Ç–∏–ø–∞—Ö —Ç–µ–≥–æ–≤ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è
      if (staticTags.includes(tag) && !updatedStats[tag].types.includes('static')) {
        updatedStats[tag].types.push('static');
      }
      if (dynamicTags.includes(tag) && !updatedStats[tag].types.includes('dynamic')) {
        updatedStats[tag].types.push('dynamic');
      }
    } else {
      // –ù–æ–≤—ã–π —Ç–µ–≥
      updatedStats[tag] = {
        count: 1,
        firstSeen: entryDate,
        lastSeen: entryDate,
        types: [] // –¢–∏–ø—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ç–µ–≥
      };
      if (staticTags.includes(tag)) updatedStats[tag].types.push('static');
      if (dynamicTags.includes(tag)) updatedStats[tag].types.push('dynamic');
    }
    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
    updatedStats[tag].lastSeen = entryDate;
  }

  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await ensureDirectoryExistence(TAG_STATS_PATH);
    await fs.writeFile(TAG_STATS_PATH, JSON.stringify(updatedStats, null, 2));
    console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤:", err.message);
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
  }
}

// --- –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ.
 */
async function createNewEntry() {
  console.log("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ—Ç –≠–ª–∞—Ä—ã...");

  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    const { rawEssay, rawReflection, cleanEntry, staticTags, dynamicTags, tags, level } = await prepareEntryData();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏
    const entry = {
      date: new Date().toISOString().split('T')[0],
      entry: cleanEntry,
      tags: tags,
      reflection_level: level,
      raw_essay: rawEssay,
      raw_reflection: rawReflection
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª
    const journal = await loadJournal();

    // --- –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤ ---
    const tagStats = await loadTagStatistics();
    // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å...");
    journal.push(entry);
    console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: ${journal.length}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª
    await saveJournal(journal);

    // --- –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤ ---
    await updateAndSaveTagStatistics(tagStats, staticTags, dynamicTags, entry.date);
    // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

    console.log("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.");

  } catch (error) {
    console.error("‚ùå ‚ùå ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
    console.error("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:", error.stack);
    throw error; // –õ—É—á—à–µ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
  } finally {
    console.log("üèÅ –§—É–Ω–∫—Ü–∏—è createNewEntry –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é.");
  (async () => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º IIFE –¥–ª—è async/await
    try {
      await createNewEntry();
      console.log("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
    } catch (err) {
      console.error("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:", err);
      process.exit(1);
    }
  })();
}

module.exports = { createNewEntry };
