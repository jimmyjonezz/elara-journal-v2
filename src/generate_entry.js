// src/generate_entry.js
const { generateEssay, generateReflection } = require('./utils/openrouter');
const { readJSON, writeJSON } = require('./utils/fileUtils');
const {
  DATA_DIR,
  JOURNAL_PATH,
  ANALYSIS_PATH,
  TAG_STATS_PATH,
  MAX_RETRIES,
  BASE_DELAY_MS,
  SEMANTIC_DICT_PATH,
  MOODS_PATH,
  CONTEXTS_PATH
} = require('./config');

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω –ø–æ –¥–∞—Ç–µ (—Å–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ)
 */
function getCurrentSeason() {
  const month = new Date().getMonth() + 1; // 1‚Äì12
  if (month >= 3 && month <= 5) return 'spring';
  if (month >= 6 && month <= 8) return 'summer';
  if (month >= 9 && month <= 11) return 'autumn';
  return 'winter';
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
 */
async function loadSemanticDictionary() {
  try {
    const dict = await readJSON(SEMANTIC_DICT_PATH);
    return dict;
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å:', error.message);
    return {};
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
 * @param {string} text
 * @param {Object} dictionary ‚Äî –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
 */
async function extractTags(text, dictionary) {
  const lowerText = text.toLowerCase();
  const tags = new Set();

  for (const [tag, data] of Object.entries(dictionary)) {
    if (!data.—Ñ–æ—Ä–º—ã || !Array.isArray(data.—Ñ–æ—Ä–º—ã)) continue;
    for (const form of data.—Ñ–æ—Ä–º—ã) {
      const normalizedForm = form.trim().toLowerCase();
      if (normalizedForm && lowerText.includes(normalizedForm)) {
        tags.add(tag);
        break;
      }
    }
  }

  if (tags.size === 0) {
    ["—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ"].forEach(tag => tags.add(tag));
  }

  return Array.from(tags);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
 */
function determineReflectionLevel(reflectionText) {
  let level = "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π";
  const levelMatch = reflectionText.match(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*(.*)$/i);
  if (levelMatch && levelMatch[1]) {
    const extractedLevel = levelMatch[1].trim().toLowerCase().replace(/[^\w–∞-—è—ë]/gi, '');
    if (["–≥–ª—É–±–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–≥–ª—É–±–æ–∫–∞—è", "–≤—ã—Å–æ–∫–∞—è"].includes(extractedLevel)) {
      level = "–≤—ã—Å–æ–∫–∏–π";
    } else if (["—Å—Ä–µ–¥–Ω–∏–π", "—Å—Ä–µ–¥–Ω—è—è"].includes(extractedLevel)) {
      level = "—Å—Ä–µ–¥–Ω–∏–π";
    } else if (["–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π", "–Ω–∏–∑–∫–∏–π", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è", "–Ω–∏–∑–∫–∞—è"].includes(extractedLevel)) {
      level = "–Ω–∏–∑–∫–∏–π";
    }
  }
  return level;
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É "–£—Ä–æ–≤–µ–Ω—å: ..." –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
 */
function cleanReflectionText(reflectionText) {
  return reflectionText.replace(/–£—Ä–æ–≤–µ–Ω—å\s*:\s*.*$/i, '').trim();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
async function withRetry(fn, maxRetries, baseDelay, actionName) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${actionName}...`);
      const result = await fn();
      console.log(`‚úÖ ${actionName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}.`);
      return result;
    } catch (error) {
      lastError = error;
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è ${actionName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt - 1) * baseDelay;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ ${actionName} –Ω–µ —É–¥–∞–ª–∏—Å—å.`);
  throw lastError;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∂—É—Ä–Ω–∞–ª
 */
async function loadJournal() {
  const journal = await readJSON(JOURNAL_PATH);
  return Array.isArray(journal) ? journal : [];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–µ–∫—É—â–µ–º—É —Å–µ–∑–æ–Ω—É
 */
async function getSeasonalMood() {
  try {
    const moods = await readJSON(MOODS_PATH);
    const season = getCurrentSeason();
    const seasonMoods = moods[season];

    if (!seasonMoods || !Array.isArray(seasonMoods) || seasonMoods.length === 0) {
      throw new Error(`–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è —Å–µ–∑–æ–Ω–∞: ${season}`);
    }

    const randomMood = seasonMoods[Math.floor(Math.random() * seasonMoods.length)];
    return {
      name: randomMood.mood,
      description: randomMood.description,
      season: season
    };
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∑–æ–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:', err.message);
    return { name: "still", description: "Like dust in sunlight", season: "winter" };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ contexts.json –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞.
 */
async function getAndRemoveFirstContext() {
  try {
    const contexts = await readJSON(CONTEXTS_PATH);
    if (!Array.isArray(contexts?.contexts) || contexts.contexts.length === 0) {
      throw new Error("–§–æ—Ä–º–∞—Ç contexts.json –Ω–∞—Ä—É—à–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç: –æ–∂–∏–¥–∞–µ—Ç—Å—è { contexts: Array<{ context: string }> } —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.");
    }
    const firstItem = contexts.contexts.shift(); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const firstContext = firstItem.context;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ
    await writeJSON(CONTEXTS_PATH, contexts);
    console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏ —É–¥–∞–ª—ë–Ω –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${firstContext.substring(0, 60)}...`);

    return firstContext;
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å contexts.json:', err.message);
    return "–¢—ã —Å–∏–¥–∏—à—å –∑–∞ —Å—Ç–æ–ª–æ–º. –ó–∞ –æ–∫–Ω–æ–º ‚Äî —Ç–∏—à–∏–Ω–∞.";
  }
}

// --- –ù–û–í–´–ï: —ç—Ç–∞–ø—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —Å–æ–≤–µ—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞, —Ç–µ–≥–∏, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
 */
async function loadExternalContext() {
  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞ ---
  let previousSuggestions = "–°–æ–≤–µ—Ç—ã –æ—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.";
  try {
    const analysisData = await readJSON(ANALYSIS_PATH);
    if (!Array.isArray(analysisData?.suggestions)) {
      console.warn("‚ö†Ô∏è analysis.json: –ø–æ–ª–µ 'suggestions' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤. –û–∂–∏–¥–∞–ª—Å—è: { suggestions: string[] }");
    } else if (analysisData.suggestions.length > 0) {
      const lastSuggestions = analysisData.suggestions.slice(-3);
      previousSuggestions = lastSuggestions.join('\n');
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${lastSuggestions.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞.`);
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", error.message);
  }

  // --- —Ç–µ–≥–∏ –∫—Ä–∏—Ç–∏–∫–∞
  let criticTags = [];

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è (–æ–¥–∏–Ω —Ä–∞–∑) ---
  const semanticDict = await loadSemanticDictionary();

  return { previousSuggestions, criticTags, semanticDict };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Å—Å–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
 */
async function generateContent(externalContext, mood, context) {
  const { previousSuggestions, semanticDict, criticTags } = externalContext;

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–≤–µ—Ç–æ–≤
  const staticInspirationTags = await extractTags(previousSuggestions, semanticDict);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
  const clusters = [...new Set([...staticInspirationTags, ...criticTags])]
    .map(tag => semanticDict[tag]?.–∫–ª–∞—Å—Ç–µ—Ä)
    .filter(Boolean);
  
  const essayData = {
    previous_suggestions: previousSuggestions,
    semantic_clusters: clusters.join(', ') || '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ, –æ—Å–º—ã—Å–ª–µ–Ω–∏–µ',
    current_mood_name: mood.name,
    current_mood_description: mood.description,
    current_context: context
  };

  const rawEssay = await withRetry(() => generateEssay(essayData), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Å—Å–µ");
  if (!rawEssay || rawEssay.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —ç—Å—Å–µ (–¥–ª–∏–Ω–∞: ${rawEssay?.length || 0}).`);
  }
  console.log("üìÑ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–≥–æ —ç—Å—Å–µ:", rawEssay.length);

  // --- –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ü–µ–Ω—ã (—É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é [/SCENE]) ---
  let pose = "she is sitting curled up in a worn vintage armchair, with her legs tucked under her.";
  let setting = "a dimly lit room filled with books, the last rays of the autumn sun.";

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—é—â–µ–µ [/SCENE]
  const sceneMatch = rawEssay.match(/\[SCENE\]\s*\n(?:Pose:\s*(.*?)\s*\n)?(?:Setting:\s*(.*?)\s*\n)?\s*\[\/SCENE\]/);

  if (sceneMatch) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pose = sceneMatch[1] ? sceneMatch[1].trim().replace(/\.$/, '') : pose;
    setting = sceneMatch[2] ? sceneMatch[2].trim().replace(/\.$/, '') : setting;
    console.log(`üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Ü–µ–Ω–∞: –ü–æ–∑–∞:"${pose}", –û–±—Å—Ç–∞–Ω–æ–≤–∫–∞:"${setting}"`);
  } else {
    console.warn('‚ö†Ô∏è –ë–ª–æ–∫ [SCENE] –≤ —Ñ–æ—Ä–º–∞—Ç–µ [SCENE]Pose: ...Setting: ...[/SCENE] –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
  }

  // –£–¥–∞–ª—è–µ–º –í–ï–°–¨ –±–ª–æ–∫ [SCENE] ... [/SCENE] –∏–∑ —Ç–µ–∫—Å—Ç–∞ —ç—Å—Å–µ
  const essayWithoutScene = rawEssay.replace(/\[SCENE\][\s\S]*?\[\/SCENE\][\s\n]*/, '').trim();
  
  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
  console.log("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...");
  const rawReflection = await withRetry(() => generateReflection(essayWithoutScene), MAX_RETRIES, BASE_DELAY_MS, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
  if (!rawReflection || rawReflection.trim().length < 10) {
    throw new Error(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–¥–ª–∏–Ω–∞: ${rawReflection?.length || 0}).`);
  }
  console.log("üí≠ –î–ª–∏–Ω–∞ —Å—ã—Ä–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:", rawReflection.length);

  const reflectionWithoutLevel = cleanReflectionText(rawReflection);
  const fullEntryText = `${essayWithoutScene}\n\n${reflectionWithoutLevel}`;

  return {
    essayWithoutScene,
    reflectionWithoutLevel,
    fullEntryText,
    pose,
    setting
  };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
 */
async function processSceneAndTags(content, externalContext) {
  const { fullEntryText } = content;
  const { semanticDict, criticTags } = externalContext;

  const staticTags = await extractTags(fullEntryText, semanticDict);
  console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: ${staticTags.length}`, staticTags);

  const allTags = Array.from(new Set([...staticTags, ...criticTags]));
  console.log(`üè∑Ô∏è –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${allTags.length}`, allTags);

  return { staticTags, allTags };
}

/**
 * –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
 */
async function finalizeEntryData(content, externalContext, mood) {
  const { reflectionWithoutLevel, pose, setting } = content;
  const level = determineReflectionLevel(reflectionWithoutLevel);

  // –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–¥–µ—Å—å
  const imagePrompt = await buildImagePrompt(pose, setting);

  return { level, imagePrompt };
}

// --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ) ---
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ fileUtils –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Ç–µ–π
const fs = require('fs').promises;
const path = require('path');

async function buildImagePrompt(pose, setting) {
  try {
    const templatePath = path.join(__dirname, 'prompt_templates/image_prompt.txt');
    let template = await fs.readFile(templatePath, 'utf8');

    let prompt = template
      .replace(/{POSE}/g, pose)
      .replace(/{SETTING}/g, setting);

    return prompt.trim();
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å image.txt, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω:', err.message);
    return `A 24-year-old woman with long wavy chestnut hair, sitting in a vintage armchair, thoughtful expression, soft golden hour lighting, melancholic atmosphere, cinematic realism, hyperrealistic painting style. Pose: ${pose}. Setting: ${setting}.`;
  }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
 */
async function prepareEntryData() {
  console.log("üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...");

  const externalContext = await loadExternalContext();
  const mood = await getSeasonalMood();
  const context = await getAndRemoveFirstContext();
  console.log(`üé≠ –¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood.name} (${mood.season})`);
  console.log(`üìñ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${context.substring(0, 60)}...`);

  const content = await generateContent(externalContext, mood, context);
  const tagData = await processSceneAndTags(content, externalContext);
  const finalData = await finalizeEntryData(content, externalContext, mood);

  return {
    ...content,
    ...tagData,
    ...finalData,
    season: mood.season,
    mood: {                   // ‚Üê –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ
      name: mood.name,
      description: mood.description
    },
    context,
    criticTags: externalContext.criticTags
  };
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤
 */
async function updateAndSaveTagStatistics(currentStats, staticTags, criticTagsFromCurrentRun, criticTagsFromAnalysis, entryDate) {
  // staticTags: –∏–∑ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  // criticTagsFromCurrentRun: –∏–∑ dynamic_tags.json (—Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ)
  // criticTagsFromAnalysis: –∏–∑ literary_analysis.json (–Ω–æ–≤–æ–µ)

  const normalizedStaticTags = staticTags.map(tag => tag.toLowerCase());
  const normalizedCriticTagsFromCurrentRun = criticTagsFromCurrentRun.map(tag => tag.toLowerCase());
  const normalizedCriticTagsFromAnalysis = (criticTagsFromAnalysis || []).map(tag => tag.toLowerCase());

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const allTagsFromEntry = new Set([
    ...normalizedStaticTags,
    ...normalizedCriticTagsFromCurrentRun,
    ...normalizedCriticTagsFromAnalysis
  ]);

  const updatedStats = { ...currentStats };

  // ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  for (const tag of allTagsFromEntry) {
    if (updatedStats[tag]) {
      updatedStats[tag].count += 1;
      updatedStats[tag].lastSeen = entryDate;
      if (normalizedStaticTags.includes(tag) && !updatedStats[tag].types.includes('static')) {
        updatedStats[tag].types.push('static');
      }
      if (normalizedCriticTagsFromCurrentRun.includes(tag) && !updatedStats[tag].types.includes('critic_from_run')) {
        updatedStats[tag].types.push('critic_from_run');
      }
      if (normalizedCriticTagsFromAnalysis.includes(tag) && !updatedStats[tag].types.includes('critic_from_analysis')) {
        updatedStats[tag].types.push('critic_from_analysis');
      }
    } else {
      updatedStats[tag] = {
        count: 1,
        firstSeen: entryDate,
        lastSeen: entryDate,
        types: []
      };
      if (normalizedStaticTags.includes(tag)) updatedStats[tag].types.push('static');
      if (normalizedCriticTagsFromCurrentRun.includes(tag)) updatedStats[tag].types.push('critic_from_run');
      if (normalizedCriticTagsFromAnalysis.includes(tag)) updatedStats[tag].types.push('critic_from_analysis');
    }
  }

  await writeJSON(TAG_STATS_PATH, updatedStats);
  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function generateEntry() {
  try {
    const {
      essayWithoutScene,
      reflectionWithoutLevel,
      fullEntryText,
      staticTags,
      criticTags,
      allTags,
      level,
      season,
      mood,
      context,
      imagePrompt
    } = await prepareEntryData();

    // üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ç–µ–ø–µ—Ä—å –∑–¥–µ—Å—å, –±–µ–∑ –ø–æ–±–æ—á–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ prepareEntryData
    await fs.writeFile(path.join(__dirname, '../data/latest_image_prompt.txt'), imagePrompt, 'utf8');
    console.log('üñºÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ data/latest_image_prompt.txt');

    const entry = {
      date: new Date().toISOString().split('T')[0],
      season: season,
      mood: { name: mood.name, description: mood.description },
      context: context, // ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      entry: fullEntryText,
      tags: allTags,
      reflection_level: level,
      raw_essay: essayWithoutScene,
      raw_reflection: reflectionWithoutLevel
    };

    const journal = await loadJournal();
    journal.push(entry);
    await writeJSON(JOURNAL_PATH, journal);
    console.log(`‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${journal.length}`);

    const tagStats = await readJSON(TAG_STATS_PATH);
    // --- –ù–û–í–û–ï: —á—Ç–µ–Ω–∏–µ tags_for_search –∏–∑ literary_analysis.json ---
    let tagsFromAnalysis = [];
    try {
      const { readJSON } = require('./utils/fileUtils'); // –£–±–µ–¥–∏—Å—å, —á—Ç–æ readJSON –¥–æ—Å—Ç—É–ø–µ–Ω
      const analysisData = await readJSON(ANALYSIS_PATH);
      if (analysisData && Array.isArray(analysisData.tags_for_search)) {
        tagsFromAnalysis = analysisData.tags_for_search;
        console.log(`üè∑Ô∏è –¢–µ–≥–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, tagsFromAnalysis);
      } else {
        console.log('‚ö†Ô∏è –í literary_analysis.json –Ω–µ—Ç –ø–æ–ª—è tags_for_search –∏–ª–∏ –æ–Ω–æ –Ω–µ –º–∞—Å—Å–∏–≤.');
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è literary_analysis.json –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', e.message);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    }
    await updateAndSaveTagStatistics(tagStats, staticTags, criticTags, tagsFromAnalysis, entry.date);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

module.exports = { generateEntry };

// --- –ó–∞–ø—É—Å–∫ ---
if (require.main === module) {
  (async () => {
    try {
      await generateEntry();
      console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.');
    } catch (err) {
      console.error('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π:', err);
      process.exit(1);
    }
  })();
}
