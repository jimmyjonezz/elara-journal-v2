# image_generator.py
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –≠–ª–∞—Ä—ã
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenRouter + Flux / SDXL
"""

import os
import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
IMAGE_DIR = "images"
os.makedirs(IMAGE_DIR, exist_ok=True)

# –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_MODEL = "openrouter/mistralai/mistral-small-3.2-24b-instruct:free"

def generate_image_prompt(reflection_text):
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –°—Ç–∏–ª—å: —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Ä—Ç, –ø–æ—ç—Ç–∏—á–µ—Å–∫–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è, —Ç–æ–Ω–∫–∞—è –º–µ–ª–∞–Ω—Ö–æ–ª–∏—è.
    –ù–µ –æ–ø–∏—Å—ã–≤–∞–π –ª—é–¥–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã: —Å–≤–µ—Ç, —Ç–µ–Ω—å, –ø—Ä–æ–≤–æ–¥–∞, —ç–∫—Ä–∞–Ω, —Ç–∏—à–∏–Ω–∞, –ø–∞–º—è—Ç—å.
    –ú–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤.

    –†–µ—Ñ–ª–µ–∫—Å–∏—è:
    {reflection_text}

    –ü—Ä–æ–º–ø—Ç:
    """
    return prompt.strip()

def call_llm_for_image_prompt(prompt):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç image prompt —á–µ—Ä–µ–∑ LiteLLM (—á–µ—Ä–µ–∑ OpenRouter)"""
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
            json={
                "model": "openrouter/qwen/qwen2.5-vl-72b-instruct:free",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 100
            }
        )
        data = response.json()
        return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return "abstract digital art, silence, soft light, wires, memory, melancholy"


def generate_image(image_prompt):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenRouter"""
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/images/generations",
            headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
            json={
                "model": IMAGE_MODEL,
                "prompt": image_prompt,
                "n": 1,
                "size": "1024x1024"
            }
        )
        data = response.json()
        if "data" in data and len(data["data"]) > 0:
            image_url = data["data"][0]["url"]
            return image_url
        else:
            print("‚ùå –ù–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", data)
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


def download_image(image_url, filename):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        response = requests.get(image_url)
        path = os.path.join(IMAGE_DIR, filename)
        with open(path, "wb") as f:
            f.write(response.content)
        return path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


def main(reflection_text):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not OPENROUTER_API_KEY:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
        return None

    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")

    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = generate_image_prompt(reflection_text)
    image_prompt = call_llm_for_image_prompt(prompt)
    print(f"üñºÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_prompt}")

    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_url = generate_image(image_prompt)
    if not image_url:
        return None

    # 3. –°–∫–∞—á–∏–≤–∞–µ–º
    filename = f"elara_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    image_path = download_image(image_url, filename)

    if image_path:
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
        return image_path

    return None
